// THIS IS AN AUTOGENERATED FILE, ANY CHANGES WILL BE LOST. DO NO EDIT THIS FILE
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const http = require('http');
var ospreyRouter = require('osprey-router');
var ospreyMethodHandler = require('osprey-method-handler');
class HttpError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = code;
        this.data = data;
    }
    toString() {
        return this.message || http.STATUS_CODES[this.code] || `Error ${this.code.toString()}`;
    }
}
exports.HttpError = HttpError;
(function (HttpError) {
    class ClientError extends HttpError {
        constructor(message, data) {
            super(400, message, data);
        }
    }
    HttpError.ClientError = ClientError;
    class ServerError extends HttpError {
        constructor(message, data) {
            super(500, message, data);
        }
    }
    HttpError.ServerError = ServerError;
    /** HTTP 400 */
    class BadRequest extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 400;
        }
    }
    HttpError.BadRequest = BadRequest;
    /** HTTP 401 */
    class Unauthorized extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 401;
        }
    }
    HttpError.Unauthorized = Unauthorized;
    /** HTTP 403 */
    class Forbidden extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 403;
        }
    }
    HttpError.Forbidden = Forbidden;
    /** HTTP 404 */
    class NotFound extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 404;
        }
    }
    HttpError.NotFound = NotFound;
    /** HTTP 406 */
    class NotAccpetable extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 406;
        }
    }
    HttpError.NotAccpetable = NotAccpetable;
    /** HTTP 408 */
    class RequestTimeout extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 408;
        }
    }
    HttpError.RequestTimeout = RequestTimeout;
    /** HTTP 410 */
    class Gone extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 410;
        }
    }
    HttpError.Gone = Gone;
    /** HTTP 415 */
    class UnsupportedMediaType extends ClientError {
        constructor(...args) {
            super(...args);
            this.code = 415;
        }
    }
    HttpError.UnsupportedMediaType = UnsupportedMediaType;
    /** HTTP 500 */
    class InternalServerError extends ServerError {
        constructor(...args) {
            super(...args);
            this.code = 500;
        }
    }
    HttpError.InternalServerError = InternalServerError;
    /** HTTP 501 */
    class NotImplemented extends ServerError {
        constructor(...args) {
            super(...args);
            this.code = 501;
        }
    }
    HttpError.NotImplemented = NotImplemented;
    /** HTTP 502 */
    class BadGateway extends ServerError {
        constructor(...args) {
            super(...args);
            this.code = 502;
        }
    }
    HttpError.BadGateway = BadGateway;
    /** HTTP 503 */
    class ServiceUnavaliable extends ServerError {
        constructor(...args) {
            super(...args);
            this.code = 503;
        }
    }
    HttpError.ServiceUnavaliable = ServiceUnavaliable;
    /** HTTP 504 */
    class GatewayTimeout extends ServerError {
        constructor(...args) {
            super(...args);
            this.code = 504;
        }
    }
    HttpError.GatewayTimeout = GatewayTimeout;
})(HttpError = exports.HttpError || (exports.HttpError = {}));
/// DemoApi v1
var DemoApi_V1;
(function (DemoApi_V1) {
    var theRouter = ospreyRouter();
    const contextSymbol = Symbol('request-context');
    class BaseControllerResponse {
        constructor(data) {
            this.data = data;
            this.status = 200;
            this.headers = {};
        }
    }
    DemoApi_V1.BaseControllerResponse = BaseControllerResponse;
    function getMiddleware() {
        return theRouter;
    }
    DemoApi_V1.getMiddleware = getMiddleware;
    function getContext(expressRequest) {
        return (expressRequest[contextSymbol] = (expressRequest[contextSymbol] || {}));
    }
    DemoApi_V1.getContext = getContext;
    DemoApi_V1.ospreyHandlerOptions = {
        discardUnknownBodies: false,
        discardUnknownQueryParameters: false,
        discardUnknownHeaders: false,
        parseBodiesOnWildcard: false,
        reviver: null,
        limit: 100 * 1024 * 1024,
        parameterLimit: 1000
    };
    var SecurityMiddlewares;
    (function (SecurityMiddlewares) {
        SecurityMiddlewares.securitySettings = { "myCustomSec": { "description": "Uses a \"token\" query string", "describedBy": { "queryParameters": { "token": { "description": "provide token", "type": "string", "example": "ABS-SDF" } } }, "type": "x-myCustomSec" } };
        function no_authenticate(req, res, next) {
            next();
        }
        SecurityMiddlewares.no_authenticate = no_authenticate;
        /** x-myCustomSec implementation */
        function myCustomSec(req, res, next) {
            console.warn("Warning! SecurityMiddlewares." + "myCustomSec" + " is not implemented!");
            next();
        }
        SecurityMiddlewares.myCustomSec = myCustomSec;
    })(SecurityMiddlewares = DemoApi_V1.SecurityMiddlewares || (DemoApi_V1.SecurityMiddlewares = {}));
    var SecurityMiddlewaresInvokers;
    (function (SecurityMiddlewaresInvokers) {
        SecurityMiddlewaresInvokers.no_authenticate = (req, res, next) => SecurityMiddlewares.no_authenticate(req, res, next);
        SecurityMiddlewaresInvokers.myCustomSec = (req, res, next) => SecurityMiddlewares.myCustomSec(req, res, next);
    })(SecurityMiddlewaresInvokers || (SecurityMiddlewaresInvokers = {}));
    DemoApi_V1.httpErrorHandler = (err, req, res, next) => {
        res.status(err.status);
        res.send({ message: err.message, status: err.status });
        next(err);
    };
    const middlewareIterator = function (list, i, req, res, next) {
        var mid = list[i];
        if (!mid)
            return next();
        mid(req, res, function (err) {
            if (err)
                return next(err);
            middlewareIterator(list, i + 1, req, res, next);
        });
    };
    /**
     * @param {Array} list of middleware to combine
     */
    function concatMiddlewares(list) {
        return function (req, res, next) {
            try {
                middlewareIterator(list, 0, req, res, (error) => {
                    if (error instanceof HttpError) {
                        DemoApi_V1.httpErrorHandler(error, req, res, next);
                    }
                    else {
                        next(error);
                    }
                });
            }
            catch (error) {
                if (error instanceof HttpError) {
                    DemoApi_V1.httpErrorHandler(error, req, res, next);
                }
                else {
                    next(error);
                }
            }
        };
    }
    class BaseController {
        /** Register this resource in the specified osprey-router. */
        registerRouter(ospreyRouter) {
            let descriptor = this.descriptor;
            if (!ospreyRouter)
                ospreyRouter = theRouter;
            for (let verb in descriptor.methods) {
                let method = descriptor.methods[verb];
                var uriParameters = {};
                descriptor.uriParameters.forEach(x => uriParameters[x.__propertyName] = x);
                ospreyRouter[verb](descriptor.baseUri, uriParameters, this.getRequestHandler(verb, method));
            }
        }
        generateQueryStringParams(params) {
            var queryString = {};
            for (let i in params) {
                let parameter = params[i];
                queryString[parameter.__propertyName] = parameter.name in this.currentContext.request.query ? this.currentContext.request.query[parameter.name] : parameter.default;
            }
            return queryString;
        }
        generateHeaderParams(headers) {
            var ret = {};
            for (let i in headers) {
                let header = headers[i];
                ret[header.__propertyName] = this.currentContext.request.get(header.name) || header.default;
            }
            return ret;
        }
        getRequestHandler(name, method) {
            let middlewares = [];
            if (method.securedBy && method.securedBy.length) {
                middlewares = middlewares.concat(method
                    .securedBy
                    .map(securitySchema => SecurityMiddlewaresInvokers[securitySchema]));
            }
            else {
                middlewares.push(SecurityMiddlewaresInvokers.no_authenticate);
            }
            if (method.descriptor) {
                middlewares.push(ospreyMethodHandler(method.descriptor, DemoApi_V1.ospreyHandlerOptions));
            }
            middlewares.push((req, res, next) => {
                this.setUpCurrentContext(req, res);
                let args = [];
                try {
                    if (method.body) {
                        args.push(this.currentContext.request.body);
                    }
                    if (method.descriptor.queryParameters) {
                        args.push(this.generateQueryStringParams(method.descriptor.queryParameters));
                    }
                    if (method.descriptor.headers) {
                        args.push(this.generateHeaderParams(method.descriptor.headers));
                    }
                    this[name]
                        .apply(this, args).then((r) => {
                        // if there is no results, bypass
                        if (!r) {
                            next();
                            return;
                        }
                        // Typed response
                        if (r && r instanceof BaseControllerResponse) {
                            res.status(r.status);
                            if (r.mime) {
                                res.set('Content-Type', r.mime);
                            }
                            if (r.headers) {
                                for (var header in r.headers) {
                                    res.append(header, r.headers[header]);
                                }
                            }
                            if (r.mime == 'application/json') {
                                res.json(r.data);
                            }
                            else {
                                res.send(r.data);
                            }
                            return;
                        }
                        if (r instanceof HttpError) {
                            return DemoApi_V1.httpErrorHandler(r, req, res, next);
                        }
                        if (r && r instanceof Error) {
                            next(r);
                            return;
                        }
                        next(new Error('Unknown method result ' + name.toUpperCase() + ' ' + this.descriptor.baseUri));
                    })
                        .catch((error) => {
                        if (error instanceof HttpError) {
                            DemoApi_V1.httpErrorHandler(error, req, res, next);
                        }
                        else {
                            next(error);
                        }
                    });
                }
                catch (e) {
                    if (e instanceof HttpError) {
                        return DemoApi_V1.httpErrorHandler(e, req, res, next);
                    }
                    else {
                        next(e);
                    }
                }
            });
            return concatMiddlewares(middlewares);
        }
        setUpCurrentContext(req, res, ctx) {
            this.currentContext = {
                request: req,
                response: res,
                context: getContext(req)
            };
            this.fillUriParameters(this.currentContext.request.params);
        }
        fillUriParameters(params) {
            if (!params)
                return;
            let descriptor = this.descriptor;
            for (let paramIndex in descriptor.uriParameters) {
                let param = descriptor.uriParameters[paramIndex];
                if (param.name in params) {
                    this.uriParameters[param.__propertyName] = params[param.name];
                }
            }
        }
    }
    DemoApi_V1.BaseController = BaseController;
    /**
     * /me
     *
     */
    var Me;
    (function (Me) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        Me.GetResult200 = GetResult200;
        /**
        * /me abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.descriptor = {
                    "methods": {
                        "get": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": {
                                        "body": {
                                            "application/json": {
                                                "schema": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"id\":\"/\",\"type\":\"object\",\"properties\":{\"name\":{\"id\":\"name\",\"type\":\"string\"},\"company\":{\"id\":\"company\",\"type\":\"string\"}},\"required\":[\"name\"]}\n",
                                                "interface": {
                                                    "tsCode": "export interface IGetMe200 {\n  name: string;\n  company?: string;\n  [k: string]: any;\n}",
                                                    "name": "IGetMe200"
                                                }
                                            }
                                        }
                                    }
                                },
                                "queryParameters": {}
                            }
                        }
                    },
                    "baseUri": "/me",
                    "uriParameters": []
                };
                this.uriParameters = {};
            }
        }
        Me.AbstractHandler = AbstractHandler;
    })(Me = DemoApi_V1.Me || (DemoApi_V1.Me = {}));
    /**
     * /me/payments
     *
     */
    var Me;
    (function (Me) {
        var Payments;
        (function (Payments) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Payments.GetResult200 = GetResult200;
            /**
            * /me/payments abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.descriptor = {
                        "methods": {
                            "get": {
                                "body": false,
                                "securedBy": [
                                    "myCustomSec"
                                ],
                                "descriptor": {
                                    "responses": {
                                        "200": null
                                    },
                                    "queryParameters": {}
                                }
                            }
                        },
                        "baseUri": "/me/payments",
                        "uriParameters": []
                    };
                    this.uriParameters = {};
                }
            }
            Payments.AbstractHandler = AbstractHandler;
        })(Payments = Me.Payments || (Me.Payments = {}));
    })(Me = DemoApi_V1.Me || (DemoApi_V1.Me = {}));
    /**
     * /users/{userId}
     *
     */
    var UserById;
    (function (UserById) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        UserById.GetResult200 = GetResult200;
        /**
        * /users/{userId} abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.descriptor = {
                    "methods": {
                        "get": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": {
                                        "body": {
                                            "application/json": {
                                                "schema": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"id\":\"/\",\"type\":\"object\",\"properties\":{\"filter\":{\"id\":\"filter\",\"type\":\"string\"},\"results\":{\"id\":\"results\",\"type\":\"array\",\"items\":{\"id\":\"0\",\"type\":\"object\",\"properties\":{\"name\":{\"id\":\"name\",\"type\":\"string\"},\"company\":{\"id\":\"company\",\"type\":\"string\"}}}}}}\n",
                                                "interface": {
                                                    "tsCode": "export interface IGetUserById200 {\n  name?: string;\n  company?: string;\n  [k: string]: any;\n}\nexport interface IGetUserById2000 {\n  filter?: string;\n  results?: IGetUserById200[];\n  [k: string]: any;\n}",
                                                    "name": "IGetUserById2000"
                                                }
                                            }
                                        }
                                    }
                                },
                                "queryParameters": {
                                    "filter": {
                                        "displayName": "filter",
                                        "type": "string",
                                        "__propertyName": "filter",
                                        "name": "filter",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "baseUri": "/users/{userId}",
                    "uriParameters": [
                        {
                            "displayName": "userId",
                            "type": "string",
                            "required": true,
                            "__propertyName": "userId",
                            "name": "userId",
                            "description": ""
                        }
                    ]
                };
                this.uriParameters = {
                    userId: void (0)
                };
            }
        }
        UserById.AbstractHandler = AbstractHandler;
    })(UserById = DemoApi_V1.UserById || (DemoApi_V1.UserById = {}));
    /**
     * /status
     *
     */
    var Status;
    (function (Status) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Status.GetResult200 = GetResult200;
        /* Response get status 202 do not describe any schema nor MIME */
        class GetResult202 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 202;
            }
        }
        Status.GetResult202 = GetResult202;
        /* Response get status 401 do not describe any schema nor MIME */
        class GetResult401 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 401;
            }
        }
        Status.GetResult401 = GetResult401;
        /* Response get status 404 do not describe any schema nor MIME */
        class GetResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Status.GetResult404 = GetResult404;
        /* Response get status 500 do not describe any schema nor MIME */
        class GetResult500 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 500;
            }
        }
        Status.GetResult500 = GetResult500;
        /* Response get status 505 do not describe any schema nor MIME */
        class GetResult505 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 505;
            }
        }
        Status.GetResult505 = GetResult505;
        /**
        * /status abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.descriptor = {
                    "methods": {
                        "get": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": null,
                                    "202": null,
                                    "401": null,
                                    "404": null,
                                    "500": null,
                                    "505": null
                                },
                                "queryParameters": {
                                    "desiredStatus": {
                                        "displayName": "desiredStatus",
                                        "type": "integer",
                                        "required": true,
                                        "__propertyName": "desiredStatus",
                                        "name": "desiredStatus",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "baseUri": "/status",
                    "uriParameters": []
                };
                this.uriParameters = {};
            }
        }
        Status.AbstractHandler = AbstractHandler;
    })(Status = DemoApi_V1.Status || (DemoApi_V1.Status = {}));
    /**
     * /required/boolean
     *
     */
    var Required;
    (function (Required) {
        var Boolean;
        (function (Boolean) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Boolean.GetResult200 = GetResult200;
            /**
            * /required/boolean abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.descriptor = {
                        "methods": {
                            "get": {
                                "body": false,
                                "securedBy": [],
                                "descriptor": {
                                    "responses": {
                                        "200": null
                                    },
                                    "queryParameters": {
                                        "param": {
                                            "displayName": "param",
                                            "type": "boolean",
                                            "required": true,
                                            "__propertyName": "param",
                                            "name": "param",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        },
                        "baseUri": "/required/boolean",
                        "uriParameters": []
                    };
                    this.uriParameters = {};
                }
            }
            Boolean.AbstractHandler = AbstractHandler;
        })(Boolean = Required.Boolean || (Required.Boolean = {}));
    })(Required = DemoApi_V1.Required || (DemoApi_V1.Required = {}));
    /**
     * /required/date
     *
     */
    var Required;
    (function (Required) {
        var Date;
        (function (Date) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Date.GetResult200 = GetResult200;
            /**
            * /required/date abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.descriptor = {
                        "methods": {
                            "get": {
                                "body": false,
                                "securedBy": [],
                                "descriptor": {
                                    "responses": {
                                        "200": null
                                    },
                                    "queryParameters": {
                                        "param": {
                                            "displayName": "param",
                                            "type": "date",
                                            "required": true,
                                            "__propertyName": "param",
                                            "name": "param",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        },
                        "baseUri": "/required/date",
                        "uriParameters": []
                    };
                    this.uriParameters = {};
                }
            }
            Date.AbstractHandler = AbstractHandler;
        })(Date = Required.Date || (Required.Date = {}));
    })(Required = DemoApi_V1.Required || (DemoApi_V1.Required = {}));
    /**
     * /required/integer
     *
     */
    var Required;
    (function (Required) {
        var Integer;
        (function (Integer) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Integer.GetResult200 = GetResult200;
            /**
            * /required/integer abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.descriptor = {
                        "methods": {
                            "get": {
                                "body": false,
                                "securedBy": [],
                                "descriptor": {
                                    "responses": {
                                        "200": null
                                    },
                                    "queryParameters": {
                                        "param": {
                                            "displayName": "param",
                                            "type": "integer",
                                            "required": true,
                                            "__propertyName": "param",
                                            "name": "param",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        },
                        "baseUri": "/required/integer",
                        "uriParameters": []
                    };
                    this.uriParameters = {};
                }
            }
            Integer.AbstractHandler = AbstractHandler;
        })(Integer = Required.Integer || (Required.Integer = {}));
    })(Required = DemoApi_V1.Required || (DemoApi_V1.Required = {}));
    /**
     * /required/number
     *
     */
    var Required;
    (function (Required) {
        var Number;
        (function (Number) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Number.GetResult200 = GetResult200;
            /**
            * /required/number abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.descriptor = {
                        "methods": {
                            "get": {
                                "body": false,
                                "securedBy": [],
                                "descriptor": {
                                    "responses": {
                                        "200": null
                                    },
                                    "queryParameters": {
                                        "param": {
                                            "displayName": "param",
                                            "type": "number",
                                            "required": true,
                                            "__propertyName": "param",
                                            "name": "param",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        },
                        "baseUri": "/required/number",
                        "uriParameters": []
                    };
                    this.uriParameters = {};
                }
            }
            Number.AbstractHandler = AbstractHandler;
        })(Number = Required.Number || (Required.Number = {}));
    })(Required = DemoApi_V1.Required || (DemoApi_V1.Required = {}));
    /**
     * /non-required/boolean
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Boolean;
            (function (Boolean) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Boolean.GetResult200 = GetResult200;
                /**
                * /non-required/boolean abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.descriptor = {
                            "methods": {
                                "get": {
                                    "body": false,
                                    "securedBy": [],
                                    "descriptor": {
                                        "responses": {
                                            "200": null
                                        },
                                        "queryParameters": {
                                            "param": {
                                                "displayName": "param",
                                                "type": "boolean",
                                                "__propertyName": "param",
                                                "name": "param",
                                                "description": ""
                                            }
                                        }
                                    }
                                }
                            },
                            "baseUri": "/non-required/boolean",
                            "uriParameters": []
                        };
                        this.uriParameters = {};
                    }
                }
                Boolean.AbstractHandler = AbstractHandler;
            })(Boolean = Required.Boolean || (Required.Boolean = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApi_V1.Non || (DemoApi_V1.Non = {}));
    /**
     * /non-required/date
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Date;
            (function (Date) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Date.GetResult200 = GetResult200;
                /**
                * /non-required/date abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.descriptor = {
                            "methods": {
                                "get": {
                                    "body": false,
                                    "securedBy": [],
                                    "descriptor": {
                                        "responses": {
                                            "200": null
                                        },
                                        "queryParameters": {
                                            "param": {
                                                "displayName": "param",
                                                "type": "date",
                                                "__propertyName": "param",
                                                "name": "param",
                                                "description": ""
                                            }
                                        }
                                    }
                                }
                            },
                            "baseUri": "/non-required/date",
                            "uriParameters": []
                        };
                        this.uriParameters = {};
                    }
                }
                Date.AbstractHandler = AbstractHandler;
            })(Date = Required.Date || (Required.Date = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApi_V1.Non || (DemoApi_V1.Non = {}));
    /**
     * /non-required/integer
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Integer;
            (function (Integer) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Integer.GetResult200 = GetResult200;
                /**
                * /non-required/integer abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.descriptor = {
                            "methods": {
                                "get": {
                                    "body": false,
                                    "securedBy": [],
                                    "descriptor": {
                                        "responses": {
                                            "200": null
                                        },
                                        "queryParameters": {
                                            "param": {
                                                "displayName": "param",
                                                "type": "integer",
                                                "__propertyName": "param",
                                                "name": "param",
                                                "description": ""
                                            }
                                        }
                                    }
                                }
                            },
                            "baseUri": "/non-required/integer",
                            "uriParameters": []
                        };
                        this.uriParameters = {};
                    }
                }
                Integer.AbstractHandler = AbstractHandler;
            })(Integer = Required.Integer || (Required.Integer = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApi_V1.Non || (DemoApi_V1.Non = {}));
    /**
     * /non-required/number
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Number;
            (function (Number) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Number.GetResult200 = GetResult200;
                /**
                * /non-required/number abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.descriptor = {
                            "methods": {
                                "get": {
                                    "body": false,
                                    "securedBy": [],
                                    "descriptor": {
                                        "responses": {
                                            "200": null
                                        },
                                        "queryParameters": {
                                            "param": {
                                                "displayName": "param",
                                                "type": "number",
                                                "__propertyName": "param",
                                                "name": "param",
                                                "description": ""
                                            }
                                        }
                                    }
                                }
                            },
                            "baseUri": "/non-required/number",
                            "uriParameters": []
                        };
                        this.uriParameters = {};
                    }
                }
                Number.AbstractHandler = AbstractHandler;
            })(Number = Required.Number || (Required.Number = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApi_V1.Non || (DemoApi_V1.Non = {}));
    /**
     * /crud
     *
     */
    var Crud;
    (function (Crud) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.GetResult200 = GetResult200;
        /* Response put status 200 do not describe any schema nor MIME */
        class PutResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.PutResult200 = PutResult200;
        /* Response post status 201 do not describe any schema nor MIME */
        class PostResult201 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 201;
            }
        }
        Crud.PostResult201 = PostResult201;
        /* Response patch status 200 do not describe any schema nor MIME */
        class PatchResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.PatchResult200 = PatchResult200;
        /* Response patch status 404 do not describe any schema nor MIME */
        class PatchResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Crud.PatchResult404 = PatchResult404;
        /* Response delete status 200 do not describe any schema nor MIME */
        class DeleteResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.DeleteResult200 = DeleteResult200;
        /* Response delete status 204 do not describe any schema nor MIME */
        class DeleteResult204 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 204;
            }
        }
        Crud.DeleteResult204 = DeleteResult204;
        /* Response delete status 404 do not describe any schema nor MIME */
        class DeleteResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Crud.DeleteResult404 = DeleteResult404;
        /**
        * /crud abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.descriptor = {
                    "methods": {
                        "get": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": null
                                },
                                "queryParameters": {
                                    "id": {
                                        "displayName": "id",
                                        "type": "integer",
                                        "required": true,
                                        "__propertyName": "id",
                                        "name": "id",
                                        "description": "Resource ID"
                                    }
                                }
                            }
                        },
                        "put": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": null
                                },
                                "queryParameters": {}
                            }
                        },
                        "post": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "201": null
                                },
                                "queryParameters": {}
                            }
                        },
                        "patch": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": null,
                                    "404": null
                                },
                                "queryParameters": {}
                            }
                        },
                        "delete": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": null,
                                    "204": null,
                                    "404": null
                                },
                                "queryParameters": {}
                            }
                        }
                    },
                    "baseUri": "/crud",
                    "uriParameters": []
                };
                this.uriParameters = {};
            }
        }
        Crud.AbstractHandler = AbstractHandler;
    })(Crud = DemoApi_V1.Crud || (DemoApi_V1.Crud = {}));
    /**
     * /popularmedia
     *
     */
    var Popularmedia;
    (function (Popularmedia) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Popularmedia.GetResult200 = GetResult200;
        /* Response get status 503 do not describe any schema nor MIME */
        class GetResult503 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 503;
            }
        }
        Popularmedia.GetResult503 = GetResult503;
        /**
        * /popularmedia abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.descriptor = {
                    "methods": {
                        "get": {
                            "body": false,
                            "securedBy": [],
                            "descriptor": {
                                "responses": {
                                    "200": null,
                                    "503": {
                                        "description": "The service is currently unavailable or you exceeded the maximum requests\nper hour allowed to your application.\n",
                                        "headers": {
                                            "X-waiting-period": {
                                                "description": "The number of seconds to wait before you can attempt to make a request again.\n",
                                                "type": "integer",
                                                "required": true,
                                                "minimum": 1,
                                                "maximum": 3600,
                                                "example": 34,
                                                "displayName": "X-waiting-period"
                                            }
                                        }
                                    }
                                },
                                "queryParameters": {}
                            }
                        }
                    },
                    "baseUri": "/popularmedia",
                    "uriParameters": []
                };
                this.uriParameters = {};
            }
        }
        Popularmedia.AbstractHandler = AbstractHandler;
    })(Popularmedia = DemoApi_V1.Popularmedia || (DemoApi_V1.Popularmedia = {}));
})(DemoApi_V1 = exports.DemoApi_V1 || (exports.DemoApi_V1 = {}));
//# sourceMappingURL=data:application/json;base64,