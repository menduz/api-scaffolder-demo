// THIS IS AN AUTOGENERATED FILE, ANY CHANGES WILL BE LOST. DO NO EDIT THIS FILE
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var ospreyRouter = require('osprey-router');
var bodyParser = require('body-parser');
/// DemoApi
var DemoApiV1;
(function (DemoApiV1) {
    var theRouter = ospreyRouter();
    const contextSymbol = Symbol('request-context');
    class BaseControllerResponse {
        constructor(data) {
            this.data = data;
            this.status = 200;
        }
    }
    DemoApiV1.BaseControllerResponse = BaseControllerResponse;
    function getMiddleware() {
        return theRouter;
    }
    DemoApiV1.getMiddleware = getMiddleware;
    function getContext(expressRequest) {
        return (expressRequest[contextSymbol] = (expressRequest[contextSymbol] || {}));
    }
    DemoApiV1.getContext = getContext;
    var SecurityMiddlewares;
    (function (SecurityMiddlewares) {
        SecurityMiddlewares.securitySettings = {};
        function no_authenticate(req, res, next) {
            next();
        }
        SecurityMiddlewares.no_authenticate = no_authenticate;
    })(SecurityMiddlewares = DemoApiV1.SecurityMiddlewares || (DemoApiV1.SecurityMiddlewares = {}));
    var SecurityMiddlewaresInvokers;
    (function (SecurityMiddlewaresInvokers) {
        SecurityMiddlewaresInvokers.no_authenticate = (req, res, next) => SecurityMiddlewares.no_authenticate(req, res, next);
    })(SecurityMiddlewaresInvokers || (SecurityMiddlewaresInvokers = {}));
    /**
     * @param {Array} list of middleware to combine
     */
    function concatMiddlewares(list) {
        return function (req, res, next) {
            function iter(i) {
                var mid = list[i];
                if (!mid)
                    return next();
                mid(req, res, function (err) {
                    if (err)
                        return next(err);
                    iter(i + 1);
                });
            }
            iter(0);
        };
    }
    class BaseController {
        /** Register this resource in the specified osprey-router. */
        registerRouter(ospreyRouter) {
            if (!ospreyRouter)
                ospreyRouter = theRouter;
            for (let verb in this.methods) {
                let method = this.methods[verb];
                ospreyRouter[verb](this.baseUri, this.baseUriParameters, this.getRequestHandler(verb, method));
            }
        }
        generateQueryStringParams(params) {
            var queryString = {};
            for (let i in params) {
                let parameter = params[i];
                queryString[i] = parameter.name in this.currentContext.request.query ? this.currentContext.request.query[parameter.name] : parameter.default;
            }
            return queryString;
        }
        generateHeaderParams(headers) {
            var ret = {};
            for (let i in headers) {
                let header = headers[i];
                ret[i] = this.currentContext.request.get(header.name) || header.default;
            }
            return ret;
        }
        getRequestHandler(name, method) {
            let middleware = (req, res, next) => {
                this.setUpCurrentContext(req, res);
                let args = [];
                if (method.body) {
                    if (typeof method.body == "function") {
                        method.body(req, res, next);
                    }
                    else {
                        bodyParser.json()(req, res, next);
                    }
                    args.push(this.currentContext.request.body);
                }
                if (method.queryString) {
                    args.push(this.generateQueryStringParams(method.queryString));
                }
                if (method.headers) {
                    args.push(this.generateHeaderParams(method.headers));
                }
                try {
                    this[name].apply(this, args).then((r) => {
                        if (r && r instanceof BaseControllerResponse) {
                            res.status(r.status);
                            if (r.mime) {
                                res.set('Content-Type', r.mime);
                            }
                            if (r.mime == 'application/json') {
                                res.json(r.data);
                            }
                            else {
                                res.send(r.data);
                            }
                            return;
                        }
                        else if (!r) {
                            next();
                            return;
                        }
                        if (r && r instanceof Error)
                            next(r);
                        else
                            next(new Error('Unknown method result ' + name.toUpperCase() + ' ' + this.baseUri));
                    }).catch(next);
                }
                catch (e) {
                    next(e);
                }
            };
            if (method.securedBy.length) {
                return concatMiddlewares(method
                    .securedBy
                    .map(securitySchema => SecurityMiddlewaresInvokers[securitySchema])
                    .concat(middleware));
            }
            else {
                return middleware;
            }
        }
        setUpCurrentContext(req, res, ctx) {
            this.currentContext = {
                request: req,
                response: res,
                context: getContext(req)
            };
            this.fillUriParameters(this.currentContext.request.params);
        }
        fillUriParameters(params) {
            if (!params)
                return;
            for (var param in this.baseUriParameters) {
                if (param in params) {
                    this.uriParameters[param] = params[param];
                }
            }
        }
    }
    DemoApiV1.BaseController = BaseController;
    /**
     * /me
     *
     */
    var Me;
    (function (Me) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        Me.GetResult200 = GetResult200;
        /**
        * /me abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/me";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Me.AbstractHandler = AbstractHandler;
    })(Me = DemoApiV1.Me || (DemoApiV1.Me = {}));
    /**
     * /users/{userId}
     *
     */
    var UserById;
    (function (UserById) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        UserById.GetResult200 = GetResult200;
        /**
        * /users/{userId} abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/users/{userId}";
                this.baseUriParameters = {
                    "userId": {
                        "displayName": "userId",
                        "type": "string",
                        "required": true,
                        "description": ""
                    }
                };
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": {
                            "filter": {
                                "displayName": "filter",
                                "type": "string",
                                "description": "",
                                "name": "filter"
                            }
                        },
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {
                    userId: void (0)
                };
            }
        }
        UserById.AbstractHandler = AbstractHandler;
    })(UserById = DemoApiV1.UserById || (DemoApiV1.UserById = {}));
})(DemoApiV1 = exports.DemoApiV1 || (exports.DemoApiV1 = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0ZBQWdGOzs7Ozs7Ozs7O0FBWWhGLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1QyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFJeEMsV0FBVztBQUNYLElBQWlCLFNBQVMsQ0F3U3pCO0FBeFNELFdBQWlCLFNBQVMsRUFBQyxDQUFDO0lBSTFCLElBQUksU0FBUyxHQUFHLFlBQVksRUFBRSxDQUFDO0lBRS9CLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRWhEO1FBR0UsWUFBbUIsSUFBUTtZQUFSLFNBQUksR0FBSixJQUFJLENBQUk7WUFGM0IsV0FBTSxHQUFXLEdBQUcsQ0FBQztRQUVTLENBQUM7SUFDakMsQ0FBQztJQUpZLGdDQUFzQix5QkFJbEMsQ0FBQTtJQUVEO1FBQ0UsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRmUsdUJBQWEsZ0JBRTVCLENBQUE7SUFFRCxvQkFBMkIsY0FBK0I7UUFDeEQsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFhLENBQUM7SUFDN0YsQ0FBQztJQUZlLG9CQUFVLGFBRXpCLENBQUE7SUFFRCxJQUFpQixtQkFBbUIsQ0FPbkM7SUFQRCxXQUFpQixtQkFBbUIsRUFBQyxDQUFDO1FBQ3ZCLG9DQUFnQixHQUFHLEVBQUUsQ0FBQztRQUVuQyx5QkFBZ0MsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQUk7WUFDL0UsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDO1FBRmUsbUNBQWUsa0JBRTlCLENBQUE7SUFFSCxDQUFDLEVBUGdCLG1CQUFtQixHQUFuQiw2QkFBbUIsS0FBbkIsNkJBQW1C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QUUsRUFBRTtxQkFDbEI7aUJBQ0YsQ0FBQztnQkFDSSxZQUFPLEdBQUc7b0JBQ2QsS0FBSyxFQUFFO3dCQUNMLE1BQU0sRUFBRSxLQUFLO3dCQUNiLGFBQWEsRUFBRTs0QkFDYixRQUFRLEVBQUU7Z0NBQ1IsYUFBYSxFQUFFLFFBQVE7Z0NBQ3ZCLE1BQU0sRUFBRSxRQUFRO2dDQUNoQixhQUFhLEVBQUUsRUFBRTtnQ0FDakIsTUFBTSxFQUFFLFFBQVE7NkJBQ2pCO3lCQUNGO3dCQUNELFNBQVMsRUFBRSxJQUFJO3dCQUNmLFdBQVcsRUFBRSxFQUFFO3FCQUNoQjtpQkFDRixDQUFDO2dCQUNJLGtCQUFhLEdBQUc7b0JBQ2hCLE1BQU0sRUFBRSxLQUFJLENBQUMsQ0FBQyxDQUFXO2lCQUMxQixDQUFBO1lBUUQsQ0FBQztRQUFELENBQUM7UUFuQ3FCLHdCQUFlLGtCQW1DcEMsQ0FBQTtJQUNILENBQUMsRUEvQ2dCLFFBQVEsR0FBUixrQkFBUSxLQUFSLGtCQUFRLFFBK0N4QjtBQUVILENBQUMsRUF4U2dCLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBd1N6QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgSVMgQU4gQVVUT0dFTkVSQVRFRCBGSUxFLCBBTlkgQ0hBTkdFUyBXSUxMIEJFIExPU1QuIERPIE5PIEVESVQgVEhJUyBGSUxFXG5cblxuXG4vKiBUT0RPOlxuaW5jbHVkZSBjcmVhdGlvbiBkYXRlIGFuZCBlZGl0aW9uIHdhcm5pbmdzXG5pbmNsdWRlIHZlcnNpb24gb2YgZ2VuZXJhdG9yXG5mb3JtYXQgY29kZVxuaGFuZGxlIHJlcXVlc3QgJiByZXNwb25zZSBoZWFkZXJzXG4qL1xuXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xudmFyIG9zcHJleVJvdXRlciA9IHJlcXVpcmUoJ29zcHJleS1yb3V0ZXInKTtcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcblxuZGVjbGFyZSBpbnRlcmZhY2UgSUNvbnRleHQgeyAvKiB5b3UgbXVzdCBkZWNsYXJlIGEgZ2xvYmFsIGludGVyZmFjZSBmb3IgY29udGV4dCAqLyB9XG5cbi8vLyBEZW1vQXBpXG5leHBvcnQgbmFtZXNwYWNlIERlbW9BcGlWMSB7XG4gXG4gIGV4cG9ydCBpbnRlcmZhY2UgRGljdGlvbmFyeTxUPiB7IFtrZXk6IHN0cmluZ10gOiBUOyB9XG5cbiAgdmFyIHRoZVJvdXRlciA9IG9zcHJleVJvdXRlcigpO1xuICBcbiAgY29uc3QgY29udGV4dFN5bWJvbCA9IFN5bWJvbCgncmVxdWVzdC1jb250ZXh0Jyk7XG4gIFxuICBleHBvcnQgY2xhc3MgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxUPiB7XG4gICAgc3RhdHVzOiBudW1iZXIgPSAyMDA7XG4gICAgbWltZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRhPzogVCl7IH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRNaWRkbGV3YXJlKCkge1xuICAgIHJldHVybiB0aGVSb3V0ZXI7XG4gIH1cbiAgXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KGV4cHJlc3NSZXF1ZXN0OiBleHByZXNzLlJlcXVlc3QpOiBJQ29udGV4dCB7XG4gICAgcmV0dXJuIChleHByZXNzUmVxdWVzdFtjb250ZXh0U3ltYm9sXSA9IChleHByZXNzUmVxdWVzdFtjb250ZXh0U3ltYm9sXSB8fCB7fSkpIGFzIElDb250ZXh0O1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBTZWN1cml0eU1pZGRsZXdhcmVzIHtcbiAgICBleHBvcnQgY29uc3Qgc2VjdXJpdHlTZXR0aW5ncyA9IHt9O1xuICAgIFxuICAgIGV4cG9ydCBmdW5jdGlvbiBub19hdXRoZW50aWNhdGUocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgbmV4dCl7XG4gICAgICBuZXh0KCk7XG4gICAgfSAgXG4gICAgXG4gIH1cbiAgXG4gIG5hbWVzcGFjZSBTZWN1cml0eU1pZGRsZXdhcmVzSW52b2tlcnMge1xuICAgIGV4cG9ydCBjb25zdCBub19hdXRoZW50aWNhdGUgPSAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgbmV4dCkgPT4gU2VjdXJpdHlNaWRkbGV3YXJlcy5ub19hdXRoZW50aWNhdGUocmVxLCByZXMsIG5leHQpO1xuICB9XG4gIFxuICBcbiAgXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5fSBsaXN0IG9mIG1pZGRsZXdhcmUgdG8gY29tYmluZVxuICAgKi9cbiAgZnVuY3Rpb24gY29uY2F0TWlkZGxld2FyZXMobGlzdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICAgIGZ1bmN0aW9uIGl0ZXIoaSkge1xuICAgICAgICB2YXIgbWlkID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKCFtaWQpIHJldHVybiBuZXh0KCk7XG4gICAgICAgIG1pZChyZXEsIHJlcywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgICAgaXRlcihpKzEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaXRlcigwKTtcbiAgICB9XG4gIH1cbiAgXG4gIGV4cG9ydCBjbGFzcyBCYXNlQ29udHJvbGxlciB7XG4gICAgYmFzZVVyaTogc3RyaW5nO1xuICAgIGJhc2VVcmlQYXJhbWV0ZXJzOiBhbnk7XG4gICAgbWV0aG9kczogYW55O1xuICAgIHVyaVBhcmFtZXRlcnM6IGFueTtcbiAgICBcbiAgICBjdXJyZW50Q29udGV4dDoge1xuICAgICAgcmVxdWVzdDogZXhwcmVzcy5SZXF1ZXN0LFxuICAgICAgcmVzcG9uc2U6IGV4cHJlc3MuUmVzcG9uc2UsXG4gICAgICBjb250ZXh0OiBJQ29udGV4dFxuICAgIH07XG5cbiAgICAvKiogUmVnaXN0ZXIgdGhpcyByZXNvdXJjZSBpbiB0aGUgc3BlY2lmaWVkIG9zcHJleS1yb3V0ZXIuICovXG4gICAgcmVnaXN0ZXJSb3V0ZXIob3NwcmV5Um91dGVyPykge1xuICAgICAgaWYoIW9zcHJleVJvdXRlcikgb3NwcmV5Um91dGVyID0gdGhlUm91dGVyO1xuICAgICAgZm9yIChsZXQgdmVyYiBpbiB0aGlzLm1ldGhvZHMpIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9IHRoaXMubWV0aG9kc1t2ZXJiXTtcbiAgICAgICAgb3NwcmV5Um91dGVyW3ZlcmJdKFxuICAgICAgICAgIHRoaXMuYmFzZVVyaSwgXG4gICAgICAgICAgdGhpcy5iYXNlVXJpUGFyYW1ldGVycywgXG4gICAgICAgICAgdGhpcy5nZXRSZXF1ZXN0SGFuZGxlcih2ZXJiLCBtZXRob2QpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgZ2VuZXJhdGVRdWVyeVN0cmluZ1BhcmFtcyhwYXJhbXM6IHsgbmFtZTogc3RyaW5nOyBkZWZhdWx0OiBhbnkgfVtdKXtcbiAgICAgIHZhciBxdWVyeVN0cmluZyA9IHt9O1xuICAgICAgZm9yKGxldCBpIGluIHBhcmFtcyl7XG4gICAgICAgIGxldCBwYXJhbWV0ZXIgPSBwYXJhbXNbaV07XG4gICAgICAgIHF1ZXJ5U3RyaW5nW2ldID0gcGFyYW1ldGVyLm5hbWUgaW4gdGhpcy5jdXJyZW50Q29udGV4dC5yZXF1ZXN0LnF1ZXJ5ID8gdGhpcy5jdXJyZW50Q29udGV4dC5yZXF1ZXN0LnF1ZXJ5W3BhcmFtZXRlci5uYW1lXSA6IHBhcmFtZXRlci5kZWZhdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGdlbmVyYXRlSGVhZGVyUGFyYW1zKGhlYWRlcnM6IHsgbmFtZTogc3RyaW5nOyBkZWZhdWx0OiBhbnkgfVtdKXtcbiAgICAgIHZhciByZXQgPSB7fTtcbiAgICAgIGZvcihsZXQgaSBpbiBoZWFkZXJzKXtcbiAgICAgICAgbGV0IGhlYWRlciA9IGhlYWRlcnNbaV07XG4gICAgICAgIHJldFtpXSA9IHRoaXMuY3VycmVudENvbnRleHQucmVxdWVzdC5nZXQoaGVhZGVyLm5hbWUpIHx8IGhlYWRlci5kZWZhdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFJlcXVlc3RIYW5kbGVyKG5hbWU6IHN0cmluZywgbWV0aG9kKSB7XG4gICAgICBsZXQgbWlkZGxld2FyZSA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgICB0aGlzLnNldFVwQ3VycmVudENvbnRleHQocmVxLCByZXMpO1xuICAgICAgICAgIFxuICAgICAgICBsZXQgYXJncyA9IFtdO1xuICAgICAgICAgIFxuICAgICAgICBpZiAobWV0aG9kLmJvZHkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG1ldGhvZC5ib2R5ID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgbWV0aG9kLmJvZHkocmVxLCByZXMsIG5leHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5UGFyc2VyLmpzb24oKShyZXEsIHJlcywgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QuYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKG1ldGhvZC5xdWVyeVN0cmluZyl7XG4gICAgICAgICAgYXJncy5wdXNoKHRoaXMuZ2VuZXJhdGVRdWVyeVN0cmluZ1BhcmFtcyhtZXRob2QucXVlcnlTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYobWV0aG9kLmhlYWRlcnMpe1xuICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmdlbmVyYXRlSGVhZGVyUGFyYW1zKG1ldGhvZC5oZWFkZXJzKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpc1tuYW1lXS5hcHBseSh0aGlzLCBhcmdzKS50aGVuKChyIDogQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+KSA9PiB7XG4gICAgICAgICAgICBpZiAociAmJiByIGluc3RhbmNlb2YgQmFzZUNvbnRyb2xsZXJSZXNwb25zZSkge1xuICAgICAgICAgICAgICByZXMuc3RhdHVzKHIuc3RhdHVzKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlmIChyLm1pbWUpIHtcbiAgICAgICAgICAgICAgICByZXMuc2V0KCdDb250ZW50LVR5cGUnLCByLm1pbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZiAoci5taW1lID09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgICAgICAgICAgIHJlcy5qc29uKHIuZGF0YSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnNlbmQoci5kYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCFyKSB7XG4gICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYociAmJiByIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgICAgICAgICAgIG5leHQocik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIG5leHQobmV3IEVycm9yKCdVbmtub3duIG1ldGhvZCByZXN1bHQgJyArIG5hbWUudG9VcHBlckNhc2UoKSArICcgJyArIHRoaXMuYmFzZVVyaSkpO1xuICAgICAgICAgIH0pLmNhdGNoKG5leHQpO1xuICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbmV4dChlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgaWYobWV0aG9kLnNlY3VyZWRCeS5sZW5ndGgpe1xuICAgICAgICByZXR1cm4gY29uY2F0TWlkZGxld2FyZXMoXG4gICAgICAgICAgbWV0aG9kXG4gICAgICAgICAgICAuc2VjdXJlZEJ5XG4gICAgICAgICAgICAgIC5tYXAoc2VjdXJpdHlTY2hlbWEgPT4gU2VjdXJpdHlNaWRkbGV3YXJlc0ludm9rZXJzW3NlY3VyaXR5U2NoZW1hXSlcbiAgICAgICAgICAgIC5jb25jYXQobWlkZGxld2FyZSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlO1xuICAgICAgfVxuICAgICAgXG4gICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0VXBDdXJyZW50Q29udGV4dChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBjdHg/OiBJQ29udGV4dCl7XG4gICAgICB0aGlzLmN1cnJlbnRDb250ZXh0ID0ge1xuICAgICAgICByZXF1ZXN0OiByZXEsXG4gICAgICAgIHJlc3BvbnNlOiByZXMsXG4gICAgICAgIGNvbnRleHQ6IGdldENvbnRleHQocmVxKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgdGhpcy5maWxsVXJpUGFyYW1ldGVycyh0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QucGFyYW1zKTtcbiAgICB9XG4gICAgXG4gICAgZmlsbFVyaVBhcmFtZXRlcnMocGFyYW1zOiBhbnkpe1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybjtcbiAgICAgIGZvcih2YXIgcGFyYW0gaW4gdGhpcy5iYXNlVXJpUGFyYW1ldGVycyl7XG4gICAgICAgIGlmKHBhcmFtIGluIHBhcmFtcyl7XG4gICAgICAgICAgdGhpcy51cmlQYXJhbWV0ZXJzW3BhcmFtXSA9IHBhcmFtc1twYXJhbV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG5leHBvcnQgaW50ZXJmYWNlIElHZXRNZTIwMCB7XG4gIG5hbWU6IHN0cmluZztcbiAgY29tcGFueT86IHN0cmluZztcbiAgW2s6IHN0cmluZ106IGFueTtcbn1leHBvcnQgaW50ZXJmYWNlIElHZXRVc2VyQnlJZDIwMCB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGNvbXBhbnk/OiBzdHJpbmc7XG4gIFtrOiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElHZXRVc2VyQnlJZDIwMDAge1xuICBmaWx0ZXI/OiBzdHJpbmc7XG4gIHJlc3VsdHM/OiBJR2V0VXNlckJ5SWQyMDBbXTtcbiAgW2s6IHN0cmluZ106IGFueTtcbn1cblxuICBcbiAgXG5cbiAgLyoqIFxuICAgKiAvbWVcbiAgICogXG4gICAqL1xuICBleHBvcnQgbmFtZXNwYWNlIE1lIHtcbiAgICBcblxuXG4gICAgZXhwb3J0IGNsYXNzIEdldFJlc3VsdDIwMCBleHRlbmRzIEJhc2VDb250cm9sbGVyUmVzcG9uc2U8SUdldE1lMjAwPiB7IHN0YXR1cyA9IDIwMDsgbWltZSA9IFwiYXBwbGljYXRpb24vanNvblwiIH1cbiAgICBcbiAgICBleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwO1xuXG4gICAgLyoqIFxuICAgICogL21lIGFic3RyYWN0IGhhbmRsZXIuIFxuICAgICovXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SGFuZGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcbiAgICAgIGJhc2VVcmkgPSBcIi9tZVwiO1xuICAgICAgYmFzZVVyaVBhcmFtZXRlcnMgPSB7fTtcbiAgICAgIG1ldGhvZHMgPSB7XG4gIFwiZ2V0XCI6IHtcbiAgICBcImJvZHlcIjogZmFsc2UsXG4gICAgXCJxdWVyeVN0cmluZ1wiOiBudWxsLFxuICAgIFwiaGVhZGVyc1wiOiBudWxsLFxuICAgIFwic2VjdXJlZEJ5XCI6IFtdXG4gIH1cbn07XG4gICAgICB1cmlQYXJhbWV0ZXJzID0ge1xuICAgICAgXG4gICAgfVxuXG4gICAgICAvKiogZ2V0IG1ldGhvZCAqL1xuICAgICAgYWJzdHJhY3QgYXN5bmMgZ2V0KCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG4gICAgfVxuICB9XG4gIFxuICBcbiAgXG5cbiAgLyoqIFxuICAgKiAvdXNlcnMve3VzZXJJZH1cbiAgICogXG4gICAqL1xuICBleHBvcnQgbmFtZXNwYWNlIFVzZXJCeUlkIHtcbiAgICBcblxuXG4gICAgZXhwb3J0IGNsYXNzIEdldFJlc3VsdDIwMCBleHRlbmRzIEJhc2VDb250cm9sbGVyUmVzcG9uc2U8SUdldFVzZXJCeUlkMjAwMD4geyBzdGF0dXMgPSAyMDA7IG1pbWUgPSBcImFwcGxpY2F0aW9uL2pzb25cIiB9XG4gICAgXG4gICAgZXhwb3J0IHR5cGUgR2V0UmVzdWx0cyA9IEdldFJlc3VsdDIwMDtcblxuICAgIC8qKiBcbiAgICAqIC91c2Vycy97dXNlcklkfSBhYnN0cmFjdCBoYW5kbGVyLiBcbiAgICAqL1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG4gICAgICBiYXNlVXJpID0gXCIvdXNlcnMve3VzZXJJZH1cIjtcbiAgICAgIGJhc2VVcmlQYXJhbWV0ZXJzID0ge1xuICBcInVzZXJJZFwiOiB7XG4gICAgXCJkaXNwbGF5TmFtZVwiOiBcInVzZXJJZFwiLFxuICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgIFwicmVxdWlyZWRcIjogdHJ1ZSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgfVxufTtcbiAgICAgIG1ldGhvZHMgPSB7XG4gIFwiZ2V0XCI6IHtcbiAgICBcImJvZHlcIjogZmFsc2UsXG4gICAgXCJxdWVyeVN0cmluZ1wiOiB7XG4gICAgICBcImZpbHRlclwiOiB7XG4gICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJmaWx0ZXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZmlsdGVyXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIFwiaGVhZGVyc1wiOiBudWxsLFxuICAgIFwic2VjdXJlZEJ5XCI6IFtdXG4gIH1cbn07XG4gICAgICB1cmlQYXJhbWV0ZXJzID0ge1xuICAgICAgdXNlcklkOiB2b2lkKDApIGFzIHN0cmluZ1xuICAgIH1cblxuICAgICAgLyoqIGdldCBtZXRob2QgKi9cbiAgICAgIGFic3RyYWN0IGFzeW5jIGdldChcbiAgICBxdWVyeVN0cmluZzoge1xuICAgICAgZmlsdGVyPzogc3RyaW5nO1xuICAgIH1cbiAgKTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcbiAgICB9XG4gIH1cbiAgXG59Il19