// THIS IS AN AUTOGENERATED FILE, ANY CHANGES WILL BE LOST. DO NO EDIT THIS FILE
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var ospreyRouter = require('osprey-router');
var bodyParser = require('body-parser');
/// DemoApi
var DemoApiV1;
(function (DemoApiV1) {
    var theRouter = ospreyRouter();
    const contextSymbol = Symbol('request-context');
    class BaseControllerResponse {
        constructor(data) {
            this.data = data;
            this.status = 200;
        }
    }
    DemoApiV1.BaseControllerResponse = BaseControllerResponse;
    function getMiddleware() {
        return theRouter;
    }
    DemoApiV1.getMiddleware = getMiddleware;
    function getContext(expressRequest) {
        return (expressRequest[contextSymbol] = (expressRequest[contextSymbol] || {}));
    }
    DemoApiV1.getContext = getContext;
    var SecurityMiddlewares;
    (function (SecurityMiddlewares) {
        SecurityMiddlewares.securitySettings = {};
        function no_authenticate(req, res, next) {
            next();
        }
        SecurityMiddlewares.no_authenticate = no_authenticate;
    })(SecurityMiddlewares = DemoApiV1.SecurityMiddlewares || (DemoApiV1.SecurityMiddlewares = {}));
    var SecurityMiddlewaresInvokers;
    (function (SecurityMiddlewaresInvokers) {
        SecurityMiddlewaresInvokers.no_authenticate = (req, res, next) => SecurityMiddlewares.no_authenticate(req, res, next);
    })(SecurityMiddlewaresInvokers || (SecurityMiddlewaresInvokers = {}));
    /**
     * @param {Array} list of middleware to combine
     */
    function concatMiddlewares(list) {
        return function (req, res, next) {
            function iter(i) {
                var mid = list[i];
                if (!mid)
                    return next();
                mid(req, res, function (err) {
                    if (err)
                        return next(err);
                    iter(i + 1);
                });
            }
            iter(0);
        };
    }
    class BaseController {
        /** Register this resource in the specified osprey-router. */
        registerRouter(ospreyRouter) {
            if (!ospreyRouter)
                ospreyRouter = theRouter;
            for (let verb in this.methods) {
                let method = this.methods[verb];
                ospreyRouter[verb](this.baseUri, this.baseUriParameters, this.getRequestHandler(verb, method));
            }
        }
        generateQueryStringParams(params) {
            var queryString = {};
            for (let i in params) {
                let parameter = params[i];
                queryString[i] = parameter.name in this.currentContext.request.query ? this.currentContext.request.query[parameter.name] : parameter.default;
            }
            return queryString;
        }
        generateHeaderParams(headers) {
            var ret = {};
            for (let i in headers) {
                let header = headers[i];
                ret[i] = this.currentContext.request.get(header.name) || header.default;
            }
            return ret;
        }
        getRequestHandler(name, method) {
            let middleware = (req, res, next) => {
                this.setUpCurrentContext(req, res);
                let args = [];
                if (method.body) {
                    if (typeof method.body == "function") {
                        method.body(req, res, next);
                    }
                    else {
                        bodyParser.json()(req, res, next);
                    }
                    args.push(this.currentContext.request.body);
                }
                if (method.queryString) {
                    args.push(this.generateQueryStringParams(method.queryString));
                }
                if (method.headers) {
                    args.push(this.generateHeaderParams(method.headers));
                }
                try {
                    this[name].apply(this, args).then((r) => {
                        if (r && r instanceof BaseControllerResponse) {
                            res.status(r.status);
                            if (r.mime) {
                                res.set('Content-Type', r.mime);
                            }
                            if (r.mime == 'application/json') {
                                res.json(r.data);
                            }
                            else {
                                res.send(r.data);
                            }
                            return;
                        }
                        else if (!r) {
                            next();
                            return;
                        }
                        if (r && r instanceof Error)
                            next(r);
                        else
                            next(new Error('Unknown method result ' + name.toUpperCase() + ' ' + this.baseUri));
                    }).catch(next);
                }
                catch (e) {
                    next(e);
                }
            };
            if (method.securedBy.length) {
                return concatMiddlewares(method
                    .securedBy
                    .map(securitySchema => SecurityMiddlewaresInvokers[securitySchema])
                    .concat(middleware));
            }
            else {
                return middleware;
            }
        }
        setUpCurrentContext(req, res, ctx) {
            this.currentContext = {
                request: req,
                response: res,
                context: getContext(req)
            };
            this.fillUriParameters(this.currentContext.request.params);
        }
        fillUriParameters(params) {
            if (!params)
                return;
            for (var param in this.baseUriParameters) {
                if (param in params) {
                    this.uriParameters[param] = params[param];
                }
            }
        }
    }
    DemoApiV1.BaseController = BaseController;
    /**
     * /me
     *
     */
    var Me;
    (function (Me) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Me.GetResult200 = GetResult200;
        /**
        * /me abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/me";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Me.AbstractHandler = AbstractHandler;
    })(Me = DemoApiV1.Me || (DemoApiV1.Me = {}));
})(DemoApiV1 = exports.DemoApiV1 || (exports.DemoApiV1 = {}));
//# sourceMappingURL=data:application/json;base64,