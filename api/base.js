// THIS IS AN AUTOGENERATED FILE, ANY CHANGES WILL BE LOST. DO NO EDIT THIS FILE
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var ospreyRouter = require('osprey-router');
var bodyParser = require('body-parser');
/// DemoApi v1
var DemoApiV1;
(function (DemoApiV1) {
    var theRouter = ospreyRouter();
    const contextSymbol = Symbol('request-context');
    class BaseControllerResponse {
        constructor(data) {
            this.data = data;
            this.status = 200;
        }
    }
    DemoApiV1.BaseControllerResponse = BaseControllerResponse;
    function getMiddleware() {
        return theRouter;
    }
    DemoApiV1.getMiddleware = getMiddleware;
    function getContext(expressRequest) {
        return (expressRequest[contextSymbol] = (expressRequest[contextSymbol] || {}));
    }
    DemoApiV1.getContext = getContext;
    var HttpError;
    (function (HttpError) {
        class BaseError extends Error {
            constructor(message, data) {
                super(message);
                this.data = data;
                this.status = 500;
            }
        }
        HttpError.BaseError = BaseError;
        class ClientError extends BaseError {
            constructor(...args) {
                super(...args);
                this.status = 400;
            }
        }
        HttpError.ClientError = ClientError;
        class ServerError extends BaseError {
            constructor(...args) {
                super(...args);
                this.status = 500;
            }
        }
        HttpError.ServerError = ServerError;
        /** HTTP 400 */
        class BadRequest extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 400;
            }
        }
        HttpError.BadRequest = BadRequest;
        /** HTTP 401 */
        class Unauthorized extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 401;
            }
        }
        HttpError.Unauthorized = Unauthorized;
        /** HTTP 403 */
        class Forbidden extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 403;
            }
        }
        HttpError.Forbidden = Forbidden;
        /** HTTP 404 */
        class NotFound extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        HttpError.NotFound = NotFound;
        /** HTTP 406 */
        class NotAccpetable extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 406;
            }
        }
        HttpError.NotAccpetable = NotAccpetable;
        /** HTTP 408 */
        class RequestTimeout extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 408;
            }
        }
        HttpError.RequestTimeout = RequestTimeout;
        /** HTTP 410 */
        class Gone extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 410;
            }
        }
        HttpError.Gone = Gone;
        /** HTTP 415 */
        class UnsupportedMediaType extends ClientError {
            constructor(...args) {
                super(...args);
                this.status = 415;
            }
        }
        HttpError.UnsupportedMediaType = UnsupportedMediaType;
        /** HTTP 500 */
        class InternalServerError extends ServerError {
            constructor(...args) {
                super(...args);
                this.status = 500;
            }
        }
        HttpError.InternalServerError = InternalServerError;
        /** HTTP 501 */
        class NotImplemented extends ServerError {
            constructor(...args) {
                super(...args);
                this.status = 501;
            }
        }
        HttpError.NotImplemented = NotImplemented;
        /** HTTP 502 */
        class BadGateway extends ServerError {
            constructor(...args) {
                super(...args);
                this.status = 502;
            }
        }
        HttpError.BadGateway = BadGateway;
        /** HTTP 503 */
        class ServiceUnavaliable extends ServerError {
            constructor(...args) {
                super(...args);
                this.status = 503;
            }
        }
        HttpError.ServiceUnavaliable = ServiceUnavaliable;
        /** HTTP 504 */
        class GatewayTimeout extends ServerError {
            constructor(...args) {
                super(...args);
                this.status = 504;
            }
        }
        HttpError.GatewayTimeout = GatewayTimeout;
    })(HttpError = DemoApiV1.HttpError || (DemoApiV1.HttpError = {}));
    var SecurityMiddlewares;
    (function (SecurityMiddlewares) {
        SecurityMiddlewares.securitySettings = { "myCustomSec": { "description": "Uses a \"token\" query string", "describedBy": { "queryParameters": { "token": { "description": "provide token", "type": "string", "example": "ABS-SDF" } } }, "type": "x-myCustomSec" } };
        function no_authenticate(req, res, next) {
            next();
        }
        SecurityMiddlewares.no_authenticate = no_authenticate;
        /** x-myCustomSec implementation */
        function myCustomSec(req, res, next) {
            console.warn("Warning! SecurityMiddlewares." + "myCustomSec" + " is not implemented!");
            next();
        }
        SecurityMiddlewares.myCustomSec = myCustomSec;
    })(SecurityMiddlewares = DemoApiV1.SecurityMiddlewares || (DemoApiV1.SecurityMiddlewares = {}));
    var SecurityMiddlewaresInvokers;
    (function (SecurityMiddlewaresInvokers) {
        SecurityMiddlewaresInvokers.no_authenticate = (req, res, next) => SecurityMiddlewares.no_authenticate(req, res, next);
        SecurityMiddlewaresInvokers.myCustomSec = (req, res, next) => SecurityMiddlewares.myCustomSec(req, res, next);
    })(SecurityMiddlewaresInvokers || (SecurityMiddlewaresInvokers = {}));
    DemoApiV1.httpErrorHandler = (err, req, res, next) => {
        res.status(err.status);
        res.send({ message: err.message, status: err.status });
        next(err);
    };
    const middlewareIterator = function (list, i, req, res, next) {
        var mid = list[i];
        if (!mid)
            return next();
        mid(req, res, function (err) {
            if (err)
                return next(err);
            middlewareIterator(list, i + 1, req, res, next);
        });
    };
    /**
     * @param {Array} list of middleware to combine
     */
    function concatMiddlewares(list) {
        return function (req, res, next) {
            try {
                middlewareIterator(list, 0, req, res, (error) => {
                    if (error instanceof HttpError.BaseError) {
                        DemoApiV1.httpErrorHandler(error, req, res, next);
                    }
                    else {
                        next(error);
                    }
                });
            }
            catch (error) {
                if (error instanceof HttpError.BaseError) {
                    DemoApiV1.httpErrorHandler(error, req, res, next);
                }
                else {
                    next(error);
                }
            }
        };
    }
    class BaseController {
        /** Register this resource in the specified osprey-router. */
        registerRouter(ospreyRouter) {
            if (!ospreyRouter)
                ospreyRouter = theRouter;
            for (let verb in this.methods) {
                let method = this.methods[verb];
                ospreyRouter[verb](this.baseUri, this.baseUriParameters, this.getRequestHandler(verb, method));
            }
        }
        generateQueryStringParams(params) {
            var queryString = {};
            for (let i in params) {
                let parameter = params[i];
                queryString[i] = parameter.name in this.currentContext.request.query ? this.currentContext.request.query[parameter.name] : parameter.default;
                // if it's required
                if (!(parameter.name in this.currentContext.request.query) && parameter.required && !('default' in parameter)) {
                    throw new HttpError.BadRequest("Missing query string parameter " + parameter.name);
                }
                if (parameter.name in this.currentContext.request.query) {
                    if (parameter.type == "number" || parameter.type == "integer") {
                        if (typeof queryString[i] != "undefined" && typeof queryString[i] != "number") {
                            if (parameter.type == "number")
                                queryString[i] = parseFloat(queryString[i]);
                            else
                                queryString[i] = parseInt(queryString[i]);
                            if (isNaN(queryString[i])) {
                                throw new HttpError.BadRequest("Invalid query string parameter " + parameter.name + ": " + JSON.stringify(this.currentContext.request.query[parameter.name]));
                            }
                        }
                    }
                    if (parameter.type == "boolean") {
                        if (typeof queryString[i] != "boolean") {
                            if (!queryString[i] || queryString[i] == "0" || queryString[i] == "false" || queryString[i] == "" || queryString[i] == "no")
                                queryString[i] = false;
                            else
                                queryString[i] = true;
                        }
                    }
                    if (parameter.type == "date") {
                        if (!(queryString[i] instanceof Date)) {
                            queryString[i] = new Date(queryString[i]);
                            if (isNaN(queryString[i]))
                                throw new HttpError.BadRequest("Invalid query string parameter " + parameter.name + ": " + JSON.stringify(this.currentContext.request.query[parameter.name]));
                        }
                    }
                }
            }
            return queryString;
        }
        generateHeaderParams(headers) {
            var ret = {};
            for (let i in headers) {
                let header = headers[i];
                ret[i] = this.currentContext.request.get(header.name) || header.default;
            }
            return ret;
        }
        getRequestHandler(name, method) {
            let middleware = (req, res, next) => {
                this.setUpCurrentContext(req, res);
                let args = [];
                try {
                    if (method.body) {
                        if (typeof method.body == "function") {
                            method.body(req, res, next);
                        }
                        else {
                            bodyParser.json()(req, res, next);
                        }
                        args.push(this.currentContext.request.body);
                    }
                    if (method.queryString) {
                        args.push(this.generateQueryStringParams(method.queryString));
                    }
                    if (method.headers) {
                        args.push(this.generateHeaderParams(method.headers));
                    }
                    this[name]
                        .apply(this, args).then((r) => {
                        // if there is no results, bypass
                        if (!r) {
                            next();
                            return;
                        }
                        // Typed response
                        if (r && r instanceof BaseControllerResponse) {
                            res.status(r.status);
                            if (r.mime) {
                                res.set('Content-Type', r.mime);
                            }
                            if (r.mime == 'application/json') {
                                res.json(r.data);
                            }
                            else {
                                res.send(r.data);
                            }
                            return;
                        }
                        if (r instanceof HttpError.BaseError) {
                            return DemoApiV1.httpErrorHandler(r, req, res, next);
                        }
                        if (r && r instanceof Error) {
                            next(r);
                            return;
                        }
                        next(new Error('Unknown method result ' + name.toUpperCase() + ' ' + this.baseUri));
                    })
                        .catch((error) => {
                        if (error instanceof HttpError.BaseError) {
                            DemoApiV1.httpErrorHandler(error, req, res, next);
                        }
                        else {
                            next(error);
                        }
                    });
                }
                catch (e) {
                    if (e instanceof HttpError.BaseError) {
                        return DemoApiV1.httpErrorHandler(e, req, res, next);
                    }
                    else {
                        next(e);
                    }
                }
            };
            if (method.securedBy.length) {
                return concatMiddlewares(method
                    .securedBy
                    .map(securitySchema => SecurityMiddlewaresInvokers[securitySchema])
                    .concat(middleware));
            }
            else {
                return middleware;
            }
        }
        setUpCurrentContext(req, res, ctx) {
            this.currentContext = {
                request: req,
                response: res,
                context: getContext(req)
            };
            this.fillUriParameters(this.currentContext.request.params);
        }
        fillUriParameters(params) {
            if (!params)
                return;
            for (var param in this.baseUriParameters) {
                if (param in params) {
                    this.uriParameters[param] = params[param];
                }
            }
        }
    }
    DemoApiV1.BaseController = BaseController;
    /**
     * /me
     *
     */
    var Me;
    (function (Me) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        Me.GetResult200 = GetResult200;
        /**
        * /me abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/me";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Me.AbstractHandler = AbstractHandler;
    })(Me = DemoApiV1.Me || (DemoApiV1.Me = {}));
    /**
     * /me/payments
     *
     */
    var Me;
    (function (Me) {
        var Payments;
        (function (Payments) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Payments.GetResult200 = GetResult200;
            /**
            * /me/payments abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/me/payments";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": null,
                            "headers": null,
                            "securedBy": [
                                "myCustomSec"
                            ]
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Payments.AbstractHandler = AbstractHandler;
        })(Payments = Me.Payments || (Me.Payments = {}));
    })(Me = DemoApiV1.Me || (DemoApiV1.Me = {}));
    /**
     * /users/{userId}
     *
     */
    var UserById;
    (function (UserById) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        UserById.GetResult200 = GetResult200;
        /**
        * /users/{userId} abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/users/{userId}";
                this.baseUriParameters = {
                    "userId": {
                        "displayName": "userId",
                        "type": "string",
                        "required": true,
                        "description": ""
                    }
                };
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": {
                            "filter": {
                                "displayName": "filter",
                                "type": "string",
                                "description": "",
                                "name": "filter"
                            }
                        },
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {
                    userId: void (0)
                };
            }
        }
        UserById.AbstractHandler = AbstractHandler;
    })(UserById = DemoApiV1.UserById || (DemoApiV1.UserById = {}));
    /**
     * /status
     *
     */
    var Status;
    (function (Status) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Status.GetResult200 = GetResult200;
        /* Response get status 202 do not describe any schema nor MIME */
        class GetResult202 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 202;
            }
        }
        Status.GetResult202 = GetResult202;
        /* Response get status 401 do not describe any schema nor MIME */
        class GetResult401 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 401;
            }
        }
        Status.GetResult401 = GetResult401;
        /* Response get status 404 do not describe any schema nor MIME */
        class GetResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Status.GetResult404 = GetResult404;
        /* Response get status 500 do not describe any schema nor MIME */
        class GetResult500 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 500;
            }
        }
        Status.GetResult500 = GetResult500;
        /* Response get status 505 do not describe any schema nor MIME */
        class GetResult505 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 505;
            }
        }
        Status.GetResult505 = GetResult505;
        /**
        * /status abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/status";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": {
                            "desiredStatus": {
                                "displayName": "desiredStatus",
                                "type": "integer",
                                "required": true,
                                "description": "",
                                "name": "desiredStatus"
                            }
                        },
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Status.AbstractHandler = AbstractHandler;
    })(Status = DemoApiV1.Status || (DemoApiV1.Status = {}));
    /**
     * /required/boolean
     *
     */
    var Required;
    (function (Required) {
        var Boolean;
        (function (Boolean) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Boolean.GetResult200 = GetResult200;
            /**
            * /required/boolean abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/boolean";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "boolean",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Boolean.AbstractHandler = AbstractHandler;
        })(Boolean = Required.Boolean || (Required.Boolean = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /required/date
     *
     */
    var Required;
    (function (Required) {
        var Date;
        (function (Date) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Date.GetResult200 = GetResult200;
            /**
            * /required/date abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/date";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "date",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Date.AbstractHandler = AbstractHandler;
        })(Date = Required.Date || (Required.Date = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /required/integer
     *
     */
    var Required;
    (function (Required) {
        var Integer;
        (function (Integer) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Integer.GetResult200 = GetResult200;
            /**
            * /required/integer abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/integer";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "integer",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Integer.AbstractHandler = AbstractHandler;
        })(Integer = Required.Integer || (Required.Integer = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /required/number
     *
     */
    var Required;
    (function (Required) {
        var Number;
        (function (Number) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Number.GetResult200 = GetResult200;
            /**
            * /required/number abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/number";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "number",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Number.AbstractHandler = AbstractHandler;
        })(Number = Required.Number || (Required.Number = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /non-required/boolean
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Boolean;
            (function (Boolean) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Boolean.GetResult200 = GetResult200;
                /**
                * /non-required/boolean abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/boolean";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "boolean",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Boolean.AbstractHandler = AbstractHandler;
            })(Boolean = Required.Boolean || (Required.Boolean = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /non-required/date
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Date;
            (function (Date) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Date.GetResult200 = GetResult200;
                /**
                * /non-required/date abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/date";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "date",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Date.AbstractHandler = AbstractHandler;
            })(Date = Required.Date || (Required.Date = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /non-required/integer
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Integer;
            (function (Integer) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Integer.GetResult200 = GetResult200;
                /**
                * /non-required/integer abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/integer";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "integer",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Integer.AbstractHandler = AbstractHandler;
            })(Integer = Required.Integer || (Required.Integer = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /non-required/number
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Number;
            (function (Number) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Number.GetResult200 = GetResult200;
                /**
                * /non-required/number abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/number";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "number",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Number.AbstractHandler = AbstractHandler;
            })(Number = Required.Number || (Required.Number = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /crud
     *
     */
    var Crud;
    (function (Crud) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.GetResult200 = GetResult200;
        /* Response put status 200 do not describe any schema nor MIME */
        class PutResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.PutResult200 = PutResult200;
        /* Response post status 201 do not describe any schema nor MIME */
        class PostResult201 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 201;
            }
        }
        Crud.PostResult201 = PostResult201;
        /* Response patch status 200 do not describe any schema nor MIME */
        class PatchResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.PatchResult200 = PatchResult200;
        /* Response patch status 404 do not describe any schema nor MIME */
        class PatchResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Crud.PatchResult404 = PatchResult404;
        /* Response delete status 200 do not describe any schema nor MIME */
        class DeleteResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Crud.DeleteResult200 = DeleteResult200;
        /* Response delete status 204 do not describe any schema nor MIME */
        class DeleteResult204 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 204;
            }
        }
        Crud.DeleteResult204 = DeleteResult204;
        /* Response delete status 404 do not describe any schema nor MIME */
        class DeleteResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Crud.DeleteResult404 = DeleteResult404;
        /**
        * /crud abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/crud";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": {
                            "id": {
                                "displayName": "id",
                                "type": "integer",
                                "required": true,
                                "description": "Resource ID",
                                "name": "id"
                            }
                        },
                        "headers": null,
                        "securedBy": []
                    },
                    "put": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    },
                    "post": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    },
                    "patch": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    },
                    "delete": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Crud.AbstractHandler = AbstractHandler;
    })(Crud = DemoApiV1.Crud || (DemoApiV1.Crud = {}));
    /**
     * /popularmedia
     *
     */
    var Popularmedia;
    (function (Popularmedia) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Popularmedia.GetResult200 = GetResult200;
        /* Response get status 503 do not describe any schema nor MIME */
        class GetResult503 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 503;
            }
        }
        Popularmedia.GetResult503 = GetResult503;
        /**
        * /popularmedia abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/popularmedia";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Popularmedia.AbstractHandler = AbstractHandler;
    })(Popularmedia = DemoApiV1.Popularmedia || (DemoApiV1.Popularmedia = {}));
})(DemoApiV1 = exports.DemoApiV1 || (exports.DemoApiV1 = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0ZBQWdGOzs7Ozs7Ozs7O0FBV2hGLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1QyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFJeEMsY0FBYztBQUNkLElBQWlCLFNBQVMsQ0E2akN6QjtBQTdqQ0QsV0FBaUIsU0FBUyxFQUFDLENBQUM7SUFJM0IsSUFBSSxTQUFTLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFFL0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFaEQ7UUFJQyxZQUFtQixJQUFRO1lBQVIsU0FBSSxHQUFKLElBQUksQ0FBSTtZQUgzQixXQUFNLEdBQVcsR0FBRyxDQUFDO1FBR1UsQ0FBQztJQUNqQyxDQUFDO0lBTFksZ0NBQXNCLHlCQUtsQyxDQUFBO0lBRUQ7UUFDQyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ2xCLENBQUM7SUFGZSx1QkFBYSxnQkFFNUIsQ0FBQTtJQUVELG9CQUEyQixjQUErQjtRQUN6RCxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLENBQWEsQ0FBQztJQUM1RixDQUFDO0lBRmUsb0JBQVUsYUFFekIsQ0FBQTtJQUVELElBQWlCLFNBQVMsQ0FzQ3pCO0lBdENELFdBQWlCLFNBQVMsRUFBQyxDQUFDO1FBQzNCLHdCQUF3QyxLQUFLO1lBRTVDLFlBQVksT0FBZ0IsRUFBUyxJQUFVO2dCQUM5QyxNQUFNLE9BQU8sQ0FBQyxDQUFDO2dCQURxQixTQUFJLEdBQUosSUFBSSxDQUFNO2dCQUQvQyxXQUFNLEdBQUcsR0FBRyxDQUFDO1lBR2IsQ0FBQztRQUNGLENBQUM7UUFMcUIsbUJBQVMsWUFLOUIsQ0FBQTtR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LEdBQUc7b0JBQ1QsS0FBSyxFQUFFO3dCQUNOLE1BQU0sRUFBRSxLQUFLO3dCQUNiLGFBQWEsRUFBRSxJQUFJO3dCQUNuQixTQUFTLEVBQUUsSUFBSTt3QkFDZixXQUFXLEVBQUUsRUFBRTtxQkFDZjtpQkFDRCxDQUFDO2dCQUNGLGtCQUFhLEdBQUcsRUFFZixDQUFBO1lBTUYsQ0FBQztRQUFELENBQUM7UUFuQnFCLDRCQUFlLGtCQW1CcEMsQ0FBQTtJQUNGLENBQUMsRUFsQ2dCLFlBQVksR0FBWixzQkFBWSxLQUFaLHNCQUFZLFFBa0M1QjtBQUVGLENBQUMsRUE3akNnQixTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQTZqQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBTiBBVVRPR0VORVJBVEVEIEZJTEUsIEFOWSBDSEFOR0VTIFdJTEwgQkUgTE9TVC4gRE8gTk8gRURJVCBUSElTIEZJTEVcblxuXG5cbi8qIFRPRE86XG5pbmNsdWRlIGNyZWF0aW9uIGRhdGUgYW5kIGVkaXRpb24gd2FybmluZ3NcbmluY2x1ZGUgdmVyc2lvbiBvZiBnZW5lcmF0b3JcbmhhbmRsZSByZXF1ZXN0ICYgcmVzcG9uc2UgaGVhZGVyc1xuKi9cblxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbnZhciBvc3ByZXlSb3V0ZXIgPSByZXF1aXJlKCdvc3ByZXktcm91dGVyJyk7XG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cbmRlY2xhcmUgaW50ZXJmYWNlIElDb250ZXh0IHsgLyogeW91IG11c3QgZGVjbGFyZSBhIGdsb2JhbCBpbnRlcmZhY2UgZm9yIGNvbnRleHQgKi8gfVxuXG4vLy8gRGVtb0FwaSB2MVxuZXhwb3J0IG5hbWVzcGFjZSBEZW1vQXBpVjEge1xuXG5cdGV4cG9ydCBpbnRlcmZhY2UgRGljdGlvbmFyeTxUPiB7IFtrZXk6IHN0cmluZ106IFQ7IH1cblxuXHR2YXIgdGhlUm91dGVyID0gb3NwcmV5Um91dGVyKCk7XG5cblx0Y29uc3QgY29udGV4dFN5bWJvbCA9IFN5bWJvbCgncmVxdWVzdC1jb250ZXh0Jyk7XG5cblx0ZXhwb3J0IGNsYXNzIEJhc2VDb250cm9sbGVyUmVzcG9uc2U8VD4ge1xuXHRcdHN0YXR1czogbnVtYmVyID0gMjAwO1xuXHRcdG1pbWU6IHN0cmluZztcblx0XHRoZWFkZXJzXG5cdFx0Y29uc3RydWN0b3IocHVibGljIGRhdGE/OiBUKSB7IH1cblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBnZXRNaWRkbGV3YXJlKCkge1xuXHRcdHJldHVybiB0aGVSb3V0ZXI7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dChleHByZXNzUmVxdWVzdDogZXhwcmVzcy5SZXF1ZXN0KTogSUNvbnRleHQge1xuXHRcdHJldHVybiAoZXhwcmVzc1JlcXVlc3RbY29udGV4dFN5bWJvbF0gPSAoZXhwcmVzc1JlcXVlc3RbY29udGV4dFN5bWJvbF0gfHwge30pKSBhcyBJQ29udGV4dDtcblx0fVxuXG5cdGV4cG9ydCBuYW1lc3BhY2UgSHR0cEVycm9yIHtcblx0XHRleHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRcdFx0c3RhdHVzID0gNTAwO1xuXHRcdFx0Y29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZywgcHVibGljIGRhdGE/OiBhbnkpIHtcblx0XHRcdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZXhwb3J0IGFic3RyYWN0IGNsYXNzIENsaWVudEVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHsgc3RhdHVzID0gNDAwOyB9XG5cdFx0ZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNlcnZlckVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHsgc3RhdHVzID0gNTAwOyB9XG5cblx0XHQvKiogSFRUUCA0MDAgKi9cblx0XHRleHBvcnQgY2xhc3MgQmFkUmVxdWVzdCBleHRlbmRzIENsaWVudEVycm9yIHsgc3RhdHVzID0gNDAwOyB9XG5cdFx0LyoqIEhUVFAgNDAxICovXG5cdFx0ZXhwb3J0IGNsYXNzIFVuYXV0aG9yaXplZCBleHRlbmRzIENsaWVudEVycm9yIHsgc3RhdHVzID0gNDAxOyB9XG5cdFx0LyoqIEhUVFAgNDAzICovXG5cdFx0ZXhwb3J0IGNsYXNzIEZvcmJpZGRlbiBleHRlbmRzIENsaWVudEVycm9yIHsgc3RhdHVzID0gNDAzOyB9XG5cdFx0LyoqIEhUVFAgNDA0ICovXG5cdFx0ZXhwb3J0IGNsYXNzIE5vdEZvdW5kIGV4dGVuZHMgQ2xpZW50RXJyb3IgeyBzdGF0dXMgPSA0MDQ7IH1cblx0XHQvKiogSFRUUCA0MDYgKi9cblx0XHRleHBvcnQgY2xhc3MgTm90QWNjcGV0YWJsZSBleHRlbmRzIENsaWVudEVycm9yIHsgc3RhdHVzID0gNDA2OyB9XG5cdFx0LyoqIEhUVFAgNDA4ICovXG5cdFx0ZXhwb3J0IGNsYXNzIFJlcXVlc3RUaW1lb3V0IGV4dGVuZHMgQ2xpZW50RXJyb3IgeyBzdGF0dXMgPSA0MDg7IH1cblx0XHQvKiogSFRUUCA0MTAgKi9cblx0XHRleHBvcnQgY2xhc3MgR29uZSBleHRlbmRzIENsaWVudEVycm9yIHsgc3RhdHVzID0gNDEwOyB9XG5cdFx0LyoqIEhUVFAgNDE1ICovXG5cdFx0ZXhwb3J0IGNsYXNzIFVuc3VwcG9ydGVkTWVkaWFUeXBlIGV4dGVuZHMgQ2xpZW50RXJyb3IgeyBzdGF0dXMgPSA0MTU7IH1cblxuXHRcdC8qKiBIVFRQIDUwMCAqL1xuXHRcdGV4cG9ydCBjbGFzcyBJbnRlcm5hbFNlcnZlckVycm9yIGV4dGVuZHMgU2VydmVyRXJyb3IgeyBzdGF0dXMgPSA1MDA7IH1cblx0XHQvKiogSFRUUCA1MDEgKi9cblx0XHRleHBvcnQgY2xhc3MgTm90SW1wbGVtZW50ZWQgZXh0ZW5kcyBTZXJ2ZXJFcnJvciB7IHN0YXR1cyA9IDUwMTsgfVxuXHRcdC8qKiBIVFRQIDUwMiAqL1xuXHRcdGV4cG9ydCBjbGFzcyBCYWRHYXRld2F5IGV4dGVuZHMgU2VydmVyRXJyb3IgeyBzdGF0dXMgPSA1MDI7IH1cblx0XHQvKiogSFRUUCA1MDMgKi9cblx0XHRleHBvcnQgY2xhc3MgU2VydmljZVVuYXZhbGlhYmxlIGV4dGVuZHMgU2VydmVyRXJyb3IgeyBzdGF0dXMgPSA1MDM7IH1cblx0XHQvKiogSFRUUCA1MDQgKi9cblx0XHRleHBvcnQgY2xhc3MgR2F0ZXdheVRpbWVvdXQgZXh0ZW5kcyBTZXJ2ZXJFcnJvciB7IHN0YXR1cyA9IDUwNDsgfVxuXHR9XG5cblx0ZXhwb3J0IG5hbWVzcGFjZSBTZWN1cml0eU1pZGRsZXdhcmVzIHtcblx0XHRleHBvcnQgY29uc3Qgc2VjdXJpdHlTZXR0aW5ncyA9IHsgXCJteUN1c3RvbVNlY1wiOiB7IFwiZGVzY3JpcHRpb25cIjogXCJVc2VzIGEgXFxcInRva2VuXFxcIiBxdWVyeSBzdHJpbmdcIiwgXCJkZXNjcmliZWRCeVwiOiB7IFwicXVlcnlQYXJhbWV0ZXJzXCI6IHsgXCJ0b2tlblwiOiB7IFwiZGVzY3JpcHRpb25cIjogXCJwcm92aWRlIHRva2VuXCIsIFwidHlwZVwiOiBcInN0cmluZ1wiLCBcImV4YW1wbGVcIjogXCJBQlMtU0RGXCIgfSB9IH0sIFwidHlwZVwiOiBcIngtbXlDdXN0b21TZWNcIiB9IH07XG5cblx0XHRleHBvcnQgZnVuY3Rpb24gbm9fYXV0aGVudGljYXRlKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSB7XG5cdFx0XHRuZXh0KCk7XG5cdFx0fVxuXG5cdFx0LyoqIHgtbXlDdXN0b21TZWMgaW1wbGVtZW50YXRpb24gKi9cblx0XHRleHBvcnQgZnVuY3Rpb24gbXlDdXN0b21TZWMocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24pIHtcblx0XHRcdGNvbnNvbGUud2FybihcIldhcm5pbmchIFNlY3VyaXR5TWlkZGxld2FyZXMuXCIgKyBcIm15Q3VzdG9tU2VjXCIgKyBcIiBpcyBub3QgaW1wbGVtZW50ZWQhXCIpO1xuXHRcdFx0bmV4dCgpO1xuXHRcdH1cblxuXHR9XG5cblx0bmFtZXNwYWNlIFNlY3VyaXR5TWlkZGxld2FyZXNJbnZva2VycyB7XG5cdFx0ZXhwb3J0IGNvbnN0IG5vX2F1dGhlbnRpY2F0ZSA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0KSA9PiBTZWN1cml0eU1pZGRsZXdhcmVzLm5vX2F1dGhlbnRpY2F0ZShyZXEsIHJlcywgbmV4dCk7XG5cdFx0ZXhwb3J0IGNvbnN0IG15Q3VzdG9tU2VjID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQpID0+IFNlY3VyaXR5TWlkZGxld2FyZXMubXlDdXN0b21TZWMocmVxLCByZXMsIG5leHQpO1xuXHR9XG5cblx0ZXhwb3J0IHZhciBodHRwRXJyb3JIYW5kbGVyOiBleHByZXNzLkVycm9yUmVxdWVzdEhhbmRsZXIgPSAoZXJyLCByZXEsIHJlcywgbmV4dCkgPT4ge1xuXHRcdHJlcy5zdGF0dXMoZXJyLnN0YXR1cyk7XG5cdFx0cmVzLnNlbmQoeyBtZXNzYWdlOiBlcnIubWVzc2FnZSwgc3RhdHVzOiBlcnIuc3RhdHVzIH0pO1xuXHRcdG5leHQoZXJyKTtcblx0fTtcblxuXHRjb25zdCBtaWRkbGV3YXJlSXRlcmF0b3IgPSBmdW5jdGlvbihsaXN0LCBpLCByZXEsIHJlcywgbmV4dCkge1xuXHRcdHZhciBtaWQgPSBsaXN0W2ldO1xuXHRcdGlmICghbWlkKSByZXR1cm4gbmV4dCgpO1xuXHRcdG1pZChyZXEsIHJlcywgZnVuY3Rpb24oZXJyKSB7XG5cdFx0XHRpZiAoZXJyKSByZXR1cm4gbmV4dChlcnIpO1xuXHRcdFx0bWlkZGxld2FyZUl0ZXJhdG9yKGxpc3QsIGkgKyAxLCByZXEsIHJlcywgbmV4dCk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtBcnJheX0gbGlzdCBvZiBtaWRkbGV3YXJlIHRvIGNvbWJpbmVcblx0ICovXG5cdGZ1bmN0aW9uIGNvbmNhdE1pZGRsZXdhcmVzKGxpc3QpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdG1pZGRsZXdhcmVJdGVyYXRvcihsaXN0LCAwLCByZXEsIHJlcywgKGVycm9yKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yLkJhc2VFcnJvcikge1xuXHRcdFx0XHRcdFx0aHR0cEVycm9ySGFuZGxlcihlcnJvciwgcmVxLCByZXMsIG5leHQpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRuZXh0KGVycm9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yLkJhc2VFcnJvcikge1xuXHRcdFx0XHRcdGh0dHBFcnJvckhhbmRsZXIoZXJyb3IsIHJlcSwgcmVzLCBuZXh0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRuZXh0KGVycm9yKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGV4cG9ydCBjbGFzcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0YmFzZVVyaTogc3RyaW5nO1xuXHRcdGJhc2VVcmlQYXJhbWV0ZXJzOiBhbnk7XG5cdFx0bWV0aG9kczogYW55O1xuXHRcdHVyaVBhcmFtZXRlcnM6IGFueTtcblxuXHRcdGN1cnJlbnRDb250ZXh0OiB7XG5cdFx0XHRyZXF1ZXN0OiBleHByZXNzLlJlcXVlc3QsXG5cdFx0XHRyZXNwb25zZTogZXhwcmVzcy5SZXNwb25zZSxcblx0XHRcdGNvbnRleHQ6IElDb250ZXh0XG5cdFx0fTtcblxuXHRcdC8qKiBSZWdpc3RlciB0aGlzIHJlc291cmNlIGluIHRoZSBzcGVjaWZpZWQgb3NwcmV5LXJvdXRlci4gKi9cblx0XHRyZWdpc3RlclJvdXRlcihvc3ByZXlSb3V0ZXI/KSB7XG5cdFx0XHRpZiAoIW9zcHJleVJvdXRlcilcblx0XHRcdFx0b3NwcmV5Um91dGVyID0gdGhlUm91dGVyO1xuXG5cdFx0XHRmb3IgKGxldCB2ZXJiIGluIHRoaXMubWV0aG9kcykge1xuXHRcdFx0XHRsZXQgbWV0aG9kID0gdGhpcy5tZXRob2RzW3ZlcmJdO1xuXG5cdFx0XHRcdG9zcHJleVJvdXRlclt2ZXJiXShcblx0XHRcdFx0XHR0aGlzLmJhc2VVcmksXG5cdFx0XHRcdFx0dGhpcy5iYXNlVXJpUGFyYW1ldGVycyxcblx0XHRcdFx0XHR0aGlzLmdldFJlcXVlc3RIYW5kbGVyKHZlcmIsIG1ldGhvZClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRwcml2YXRlIGdlbmVyYXRlUXVlcnlTdHJpbmdQYXJhbXMocGFyYW1zOiB7IG5hbWU6IHN0cmluZzsgZGVmYXVsdDogYW55OyB0eXBlOiBzdHJpbmc7IHJlcXVpcmVkOiBib29sZWFuOyB9W10pIHtcblx0XHRcdHZhciBxdWVyeVN0cmluZyA9IHt9O1xuXHRcdFx0Zm9yIChsZXQgaSBpbiBwYXJhbXMpIHtcblx0XHRcdFx0bGV0IHBhcmFtZXRlciA9IHBhcmFtc1tpXTtcblx0XHRcdFx0cXVlcnlTdHJpbmdbaV0gPSBwYXJhbWV0ZXIubmFtZSBpbiB0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QucXVlcnkgPyB0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QucXVlcnlbcGFyYW1ldGVyLm5hbWVdIDogcGFyYW1ldGVyLmRlZmF1bHQ7XG5cblx0XHRcdFx0Ly8gaWYgaXQncyByZXF1aXJlZFxuXHRcdFx0XHRpZiAoIShwYXJhbWV0ZXIubmFtZSBpbiB0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QucXVlcnkpICYmIHBhcmFtZXRlci5yZXF1aXJlZCAmJiAhKCdkZWZhdWx0JyBpbiBwYXJhbWV0ZXIpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEh0dHBFcnJvci5CYWRSZXF1ZXN0KFwiTWlzc2luZyBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyIFwiICsgcGFyYW1ldGVyLm5hbWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHBhcmFtZXRlci5uYW1lIGluIHRoaXMuY3VycmVudENvbnRleHQucmVxdWVzdC5xdWVyeSkge1xuXHRcdFx0XHRcdGlmIChwYXJhbWV0ZXIudHlwZSA9PSBcIm51bWJlclwiIHx8IHBhcmFtZXRlci50eXBlID09IFwiaW50ZWdlclwiKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIHF1ZXJ5U3RyaW5nW2ldICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHF1ZXJ5U3RyaW5nW2ldICE9IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtZXRlci50eXBlID09IFwibnVtYmVyXCIpXG5cdFx0XHRcdFx0XHRcdFx0cXVlcnlTdHJpbmdbaV0gPSBwYXJzZUZsb2F0KHF1ZXJ5U3RyaW5nW2ldKTtcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHF1ZXJ5U3RyaW5nW2ldID0gcGFyc2VJbnQocXVlcnlTdHJpbmdbaV0pO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChpc05hTihxdWVyeVN0cmluZ1tpXSkpIHtcblx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgSHR0cEVycm9yLkJhZFJlcXVlc3QoXCJJbnZhbGlkIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXIgXCIgKyBwYXJhbWV0ZXIubmFtZSArIFwiOiBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuY3VycmVudENvbnRleHQucmVxdWVzdC5xdWVyeVtwYXJhbWV0ZXIubmFtZV0pKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChwYXJhbWV0ZXIudHlwZSA9PSBcImJvb2xlYW5cIikge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBxdWVyeVN0cmluZ1tpXSAhPSBcImJvb2xlYW5cIikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXF1ZXJ5U3RyaW5nW2ldIHx8IHF1ZXJ5U3RyaW5nW2ldID09IFwiMFwiIHx8IHF1ZXJ5U3RyaW5nW2ldID09IFwiZmFsc2VcIiB8fCBxdWVyeVN0cmluZ1tpXSA9PSBcIlwiIHx8IHF1ZXJ5U3RyaW5nW2ldID09IFwibm9cIilcblx0XHRcdFx0XHRcdFx0XHRxdWVyeVN0cmluZ1tpXSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0cXVlcnlTdHJpbmdbaV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChwYXJhbWV0ZXIudHlwZSA9PSBcImRhdGVcIikge1xuXHRcdFx0XHRcdFx0aWYgKCEocXVlcnlTdHJpbmdbaV0gaW5zdGFuY2VvZiBEYXRlKSkge1xuXHRcdFx0XHRcdFx0XHRxdWVyeVN0cmluZ1tpXSA9IG5ldyBEYXRlKHF1ZXJ5U3RyaW5nW2ldKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoaXNOYU4ocXVlcnlTdHJpbmdbaV0pKVxuXHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBIdHRwRXJyb3IuQmFkUmVxdWVzdChcIkludmFsaWQgcXVlcnkgc3RyaW5nIHBhcmFtZXRlciBcIiArIHBhcmFtZXRlci5uYW1lICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5jdXJyZW50Q29udGV4dC5yZXF1ZXN0LnF1ZXJ5W3BhcmFtZXRlci5uYW1lXSkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXJ5U3RyaW5nO1xuXHRcdH1cblxuXHRcdHByaXZhdGUgZ2VuZXJhdGVIZWFkZXJQYXJhbXMoaGVhZGVyczogeyBuYW1lOiBzdHJpbmc7IGRlZmF1bHQ6IGFueSB9W10pIHtcblx0XHRcdHZhciByZXQgPSB7fTtcblx0XHRcdGZvciAobGV0IGkgaW4gaGVhZGVycykge1xuXHRcdFx0XHRsZXQgaGVhZGVyID0gaGVhZGVyc1tpXTtcblx0XHRcdFx0cmV0W2ldID0gdGhpcy5jdXJyZW50Q29udGV4dC5yZXF1ZXN0LmdldChoZWFkZXIubmFtZSkgfHwgaGVhZGVyLmRlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHByaXZhdGUgZ2V0UmVxdWVzdEhhbmRsZXIobmFtZTogc3RyaW5nLCBtZXRob2QpIHtcblx0XHRcdGxldCBtaWRkbGV3YXJlID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0VXBDdXJyZW50Q29udGV4dChyZXEsIHJlcyk7XG5cblx0XHRcdFx0bGV0IGFyZ3MgPSBbXTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0aWYgKG1ldGhvZC5ib2R5KSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIG1ldGhvZC5ib2R5ID09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRtZXRob2QuYm9keShyZXEsIHJlcywgbmV4dCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRib2R5UGFyc2VyLmpzb24oKShyZXEsIHJlcywgbmV4dCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGFyZ3MucHVzaCh0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QuYm9keSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKG1ldGhvZC5xdWVyeVN0cmluZykge1xuXHRcdFx0XHRcdFx0YXJncy5wdXNoKHRoaXMuZ2VuZXJhdGVRdWVyeVN0cmluZ1BhcmFtcyhtZXRob2QucXVlcnlTdHJpbmcpKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAobWV0aG9kLmhlYWRlcnMpIHtcblx0XHRcdFx0XHRcdGFyZ3MucHVzaCh0aGlzLmdlbmVyYXRlSGVhZGVyUGFyYW1zKG1ldGhvZC5oZWFkZXJzKSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpc1tuYW1lXVxuXHRcdFx0XHRcdFx0LmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4oKHI6IEJhc2VDb250cm9sbGVyUmVzcG9uc2U8YW55PikgPT4ge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyByZXN1bHRzLCBieXBhc3Ncblx0XHRcdFx0XHRcdFx0aWYgKCFyKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIFR5cGVkIHJlc3BvbnNlXG5cdFx0XHRcdFx0XHRcdGlmIChyICYmIHIgaW5zdGFuY2VvZiBCYXNlQ29udHJvbGxlclJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzLnN0YXR1cyhyLnN0YXR1cyk7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoci5taW1lKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXMuc2V0KCdDb250ZW50LVR5cGUnLCByLm1pbWUpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmIChyLm1pbWUgPT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXMuanNvbihyLmRhdGEpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXMuc2VuZChyLmRhdGEpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChyIGluc3RhbmNlb2YgSHR0cEVycm9yLkJhc2VFcnJvcikge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBodHRwRXJyb3JIYW5kbGVyKHIgYXMgYW55LCByZXEsIHJlcywgbmV4dCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAociAmJiByIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdFx0XHRcdFx0XHRuZXh0KHIpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdG5leHQobmV3IEVycm9yKCdVbmtub3duIG1ldGhvZCByZXN1bHQgJyArIG5hbWUudG9VcHBlckNhc2UoKSArICcgJyArIHRoaXMuYmFzZVVyaSkpO1xuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC5jYXRjaCgoZXJyb3IpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yLkJhc2VFcnJvcikge1xuXHRcdFx0XHRcdFx0XHRcdGh0dHBFcnJvckhhbmRsZXIoZXJyb3IsIHJlcSwgcmVzLCBuZXh0KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRuZXh0KGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRpZiAoZSBpbnN0YW5jZW9mIEh0dHBFcnJvci5CYXNlRXJyb3IpIHtcblx0XHRcdFx0XHRcdHJldHVybiBodHRwRXJyb3JIYW5kbGVyKGUsIHJlcSwgcmVzLCBuZXh0KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bmV4dChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGlmIChtZXRob2Quc2VjdXJlZEJ5Lmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gY29uY2F0TWlkZGxld2FyZXMoXG5cdFx0XHRcdFx0bWV0aG9kXG5cdFx0XHRcdFx0XHQuc2VjdXJlZEJ5XG5cdFx0XHRcdFx0XHQubWFwKHNlY3VyaXR5U2NoZW1hID0+IFNlY3VyaXR5TWlkZGxld2FyZXNJbnZva2Vyc1tzZWN1cml0eVNjaGVtYV0pXG5cdFx0XHRcdFx0XHQuY29uY2F0KG1pZGRsZXdhcmUpXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gbWlkZGxld2FyZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRzZXRVcEN1cnJlbnRDb250ZXh0KHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIGN0eD86IElDb250ZXh0KSB7XG5cdFx0XHR0aGlzLmN1cnJlbnRDb250ZXh0ID0ge1xuXHRcdFx0XHRyZXF1ZXN0OiByZXEsXG5cdFx0XHRcdHJlc3BvbnNlOiByZXMsXG5cdFx0XHRcdGNvbnRleHQ6IGdldENvbnRleHQocmVxKVxuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5maWxsVXJpUGFyYW1ldGVycyh0aGlzLmN1cnJlbnRDb250ZXh0LnJlcXVlc3QucGFyYW1zKTtcblx0XHR9XG5cblx0XHRmaWxsVXJpUGFyYW1ldGVycyhwYXJhbXM6IGFueSkge1xuXHRcdFx0aWYgKCFwYXJhbXMpIHJldHVybjtcblx0XHRcdGZvciAodmFyIHBhcmFtIGluIHRoaXMuYmFzZVVyaVBhcmFtZXRlcnMpIHtcblx0XHRcdFx0aWYgKHBhcmFtIGluIHBhcmFtcykge1xuXHRcdFx0XHRcdHRoaXMudXJpUGFyYW1ldGVyc1twYXJhbV0gPSBwYXJhbXNbcGFyYW1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZXhwb3J0IGludGVyZmFjZSBJR2V0TWUyMDAge1xuXHRcdG5hbWU6IHN0cmluZztcblx0XHRjb21wYW55Pzogc3RyaW5nO1xuXHRcdFtrOiBzdHJpbmddOiBhbnk7XG5cdH1leHBvcnQgaW50ZXJmYWNlIElHZXRVc2VyQnlJZDIwMCB7XG5cdFx0bmFtZT86IHN0cmluZztcblx0XHRjb21wYW55Pzogc3RyaW5nO1xuXHRcdFtrOiBzdHJpbmddOiBhbnk7XG5cdH1cblx0ZXhwb3J0IGludGVyZmFjZSBJR2V0VXNlckJ5SWQyMDAwIHtcblx0XHRmaWx0ZXI/OiBzdHJpbmc7XG5cdFx0cmVzdWx0cz86IElHZXRVc2VyQnlJZDIwMFtdO1xuXHRcdFtrOiBzdHJpbmddOiBhbnk7XG5cdH1cblxuXG5cblxuXHQvKiogXG5cdCAqIC9tZVxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgTWUge1xuXG5cblxuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQyMDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPElHZXRNZTIwMD4geyBzdGF0dXMgPSAyMDA7IG1pbWUgPSBcImFwcGxpY2F0aW9uL2pzb25cIiB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9tZSBhYnN0cmFjdCBoYW5kbGVyLiBcblx0XHQqL1xuXHRcdGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0XHRiYXNlVXJpID0gXCIvbWVcIjtcblx0XHRcdGJhc2VVcmlQYXJhbWV0ZXJzID0ge307XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjogbnVsbCxcblx0XHRcdFx0XHRcImhlYWRlcnNcIjogbnVsbCxcblx0XHRcdFx0XHRcInNlY3VyZWRCeVwiOiBbXVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0dXJpUGFyYW1ldGVycyA9IHtcblxuXHRcdFx0fVxuXG5cdFx0XHQvKiogZ2V0IG1ldGhvZCAqL1xuXHRcdFx0YWJzdHJhY3QgYXN5bmMgZ2V0KCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG5cdFx0fVxuXHR9XG5cblxuXG5cdC8qKiBcblx0ICogL21lL3BheW1lbnRzXG5cdCAqIFxuXHQgKi9cblx0ZXhwb3J0IG5hbWVzcGFjZSBNZS5QYXltZW50cyB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9tZS9wYXltZW50cyBhYnN0cmFjdCBoYW5kbGVyLiBcblx0XHQqL1xuXHRcdGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0XHRiYXNlVXJpID0gXCIvbWUvcGF5bWVudHNcIjtcblx0XHRcdGJhc2VVcmlQYXJhbWV0ZXJzID0ge307XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjogbnVsbCxcblx0XHRcdFx0XHRcImhlYWRlcnNcIjogbnVsbCxcblx0XHRcdFx0XHRcInNlY3VyZWRCeVwiOiBbXG5cdFx0XHRcdFx0XHRcIm15Q3VzdG9tU2VjXCJcblx0XHRcdFx0XHRdXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR1cmlQYXJhbWV0ZXJzID0ge1xuXG5cdFx0XHR9XG5cblx0XHRcdC8qKiBnZXQgbWV0aG9kICovXG5cdFx0XHRhYnN0cmFjdCBhc3luYyBnZXQoKTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcblx0XHR9XG5cdH1cblxuXG5cblxuXHQvKiogXG5cdCAqIC91c2Vycy97dXNlcklkfVxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgVXNlckJ5SWQge1xuXG5cblxuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQyMDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPElHZXRVc2VyQnlJZDIwMDA+IHsgc3RhdHVzID0gMjAwOyBtaW1lID0gXCJhcHBsaWNhdGlvbi9qc29uXCIgfVxuXG5cdFx0ZXhwb3J0IHR5cGUgR2V0UmVzdWx0cyA9IEdldFJlc3VsdDIwMCB8IHZvaWQ7XG5cblx0XHQvKiogXG5cdFx0KiAvdXNlcnMve3VzZXJJZH0gYWJzdHJhY3QgaGFuZGxlci4gXG5cdFx0Ki9cblx0XHRleHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RIYW5kbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xuXHRcdFx0YmFzZVVyaSA9IFwiL3VzZXJzL3t1c2VySWR9XCI7XG5cdFx0XHRiYXNlVXJpUGFyYW1ldGVycyA9IHtcblx0XHRcdFx0XCJ1c2VySWRcIjoge1xuXHRcdFx0XHRcdFwiZGlzcGxheU5hbWVcIjogXCJ1c2VySWRcIixcblx0XHRcdFx0XHRcInR5cGVcIjogXCJzdHJpbmdcIixcblx0XHRcdFx0XHRcInJlcXVpcmVkXCI6IHRydWUsXG5cdFx0XHRcdFx0XCJkZXNjcmlwdGlvblwiOiBcIlwiXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjoge1xuXHRcdFx0XHRcdFx0XCJmaWx0ZXJcIjoge1xuXHRcdFx0XHRcdFx0XHRcImRpc3BsYXlOYW1lXCI6IFwiZmlsdGVyXCIsXG5cdFx0XHRcdFx0XHRcdFwidHlwZVwiOiBcInN0cmluZ1wiLFxuXHRcdFx0XHRcdFx0XHRcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOiBcImZpbHRlclwiXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImhlYWRlcnNcIjogbnVsbCxcblx0XHRcdFx0XHRcInNlY3VyZWRCeVwiOiBbXVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0dXJpUGFyYW1ldGVycyA9IHtcblx0XHRcdFx0dXNlcklkOiB2b2lkICgwKSBhcyBzdHJpbmdcblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRmaWx0ZXI/OiBzdHJpbmc7XG5cdFx0XHRcdH1cblx0XHRcdCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG5cdFx0fVxuXHR9XG5cblxuXG5cdC8qKiBcblx0ICogL3N0YXR1c1xuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgU3RhdHVzIHtcblxuXG5cblx0XHQvKiBSZXNwb25zZSBnZXQgc3RhdHVzIDIwMCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQyMDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSAyMDA7IH1cblx0XHQvKiBSZXNwb25zZSBnZXQgc3RhdHVzIDIwMiBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQyMDIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSAyMDI7IH1cblx0XHQvKiBSZXNwb25zZSBnZXQgc3RhdHVzIDQwMSBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQ0MDEgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSA0MDE7IH1cblx0XHQvKiBSZXNwb25zZSBnZXQgc3RhdHVzIDQwNCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQ0MDQgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSA0MDQ7IH1cblx0XHQvKiBSZXNwb25zZSBnZXQgc3RhdHVzIDUwMCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQ1MDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSA1MDA7IH1cblx0XHQvKiBSZXNwb25zZSBnZXQgc3RhdHVzIDUwNSBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBHZXRSZXN1bHQ1MDUgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSA1MDU7IH1cblxuXHRcdGV4cG9ydCB0eXBlIEdldFJlc3VsdHMgPSBHZXRSZXN1bHQyMDAgfCBHZXRSZXN1bHQyMDIgfCBHZXRSZXN1bHQ0MDEgfCBHZXRSZXN1bHQ0MDQgfCBHZXRSZXN1bHQ1MDAgfCBHZXRSZXN1bHQ1MDUgfCB2b2lkO1xuXG5cdFx0LyoqIFxuXHRcdCogL3N0YXR1cyBhYnN0cmFjdCBoYW5kbGVyLiBcblx0XHQqL1xuXHRcdGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0XHRiYXNlVXJpID0gXCIvc3RhdHVzXCI7XG5cdFx0XHRiYXNlVXJpUGFyYW1ldGVycyA9IHt9O1xuXHRcdFx0bWV0aG9kcyA9IHtcblx0XHRcdFx0XCJnZXRcIjoge1xuXHRcdFx0XHRcdFwiYm9keVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcInF1ZXJ5U3RyaW5nXCI6IHtcblx0XHRcdFx0XHRcdFwiZGVzaXJlZFN0YXR1c1wiOiB7XG5cdFx0XHRcdFx0XHRcdFwiZGlzcGxheU5hbWVcIjogXCJkZXNpcmVkU3RhdHVzXCIsXG5cdFx0XHRcdFx0XHRcdFwidHlwZVwiOiBcImludGVnZXJcIixcblx0XHRcdFx0XHRcdFx0XCJyZXF1aXJlZFwiOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOiBcImRlc2lyZWRTdGF0dXNcIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRkZXNpcmVkU3RhdHVzOiBudW1iZXI7XG5cdFx0XHRcdH1cblx0XHRcdCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG5cdFx0fVxuXHR9XG5cblxuXG5cblx0LyoqIFxuXHQgKiAvcmVxdWlyZWQvYm9vbGVhblxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgUmVxdWlyZWQuQm9vbGVhbiB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9yZXF1aXJlZC9ib29sZWFuIGFic3RyYWN0IGhhbmRsZXIuIFxuXHRcdCovXG5cdFx0ZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SGFuZGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcblx0XHRcdGJhc2VVcmkgPSBcIi9yZXF1aXJlZC9ib29sZWFuXCI7XG5cdFx0XHRiYXNlVXJpUGFyYW1ldGVycyA9IHt9O1xuXHRcdFx0bWV0aG9kcyA9IHtcblx0XHRcdFx0XCJnZXRcIjoge1xuXHRcdFx0XHRcdFwiYm9keVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcInF1ZXJ5U3RyaW5nXCI6IHtcblx0XHRcdFx0XHRcdFwicGFyYW1cIjoge1xuXHRcdFx0XHRcdFx0XHRcImRpc3BsYXlOYW1lXCI6IFwicGFyYW1cIixcblx0XHRcdFx0XHRcdFx0XCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuXHRcdFx0XHRcdFx0XHRcInJlcXVpcmVkXCI6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbTogYm9vbGVhbjtcblx0XHRcdFx0fVxuXHRcdFx0KTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcblx0XHR9XG5cdH1cblxuXG5cblx0LyoqIFxuXHQgKiAvcmVxdWlyZWQvZGF0ZVxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgUmVxdWlyZWQuRGF0ZSB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9yZXF1aXJlZC9kYXRlIGFic3RyYWN0IGhhbmRsZXIuIFxuXHRcdCovXG5cdFx0ZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SGFuZGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcblx0XHRcdGJhc2VVcmkgPSBcIi9yZXF1aXJlZC9kYXRlXCI7XG5cdFx0XHRiYXNlVXJpUGFyYW1ldGVycyA9IHt9O1xuXHRcdFx0bWV0aG9kcyA9IHtcblx0XHRcdFx0XCJnZXRcIjoge1xuXHRcdFx0XHRcdFwiYm9keVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcInF1ZXJ5U3RyaW5nXCI6IHtcblx0XHRcdFx0XHRcdFwicGFyYW1cIjoge1xuXHRcdFx0XHRcdFx0XHRcImRpc3BsYXlOYW1lXCI6IFwicGFyYW1cIixcblx0XHRcdFx0XHRcdFx0XCJ0eXBlXCI6IFwiZGF0ZVwiLFxuXHRcdFx0XHRcdFx0XHRcInJlcXVpcmVkXCI6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbTogRGF0ZTtcblx0XHRcdFx0fVxuXHRcdFx0KTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcblx0XHR9XG5cdH1cblxuXG5cblx0LyoqIFxuXHQgKiAvcmVxdWlyZWQvaW50ZWdlclxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgUmVxdWlyZWQuSW50ZWdlciB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9yZXF1aXJlZC9pbnRlZ2VyIGFic3RyYWN0IGhhbmRsZXIuIFxuXHRcdCovXG5cdFx0ZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SGFuZGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcblx0XHRcdGJhc2VVcmkgPSBcIi9yZXF1aXJlZC9pbnRlZ2VyXCI7XG5cdFx0XHRiYXNlVXJpUGFyYW1ldGVycyA9IHt9O1xuXHRcdFx0bWV0aG9kcyA9IHtcblx0XHRcdFx0XCJnZXRcIjoge1xuXHRcdFx0XHRcdFwiYm9keVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcInF1ZXJ5U3RyaW5nXCI6IHtcblx0XHRcdFx0XHRcdFwicGFyYW1cIjoge1xuXHRcdFx0XHRcdFx0XHRcImRpc3BsYXlOYW1lXCI6IFwicGFyYW1cIixcblx0XHRcdFx0XHRcdFx0XCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuXHRcdFx0XHRcdFx0XHRcInJlcXVpcmVkXCI6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbTogbnVtYmVyO1xuXHRcdFx0XHR9XG5cdFx0XHQpOiBQcm9taXNlPEdldFJlc3VsdHM+O1xuXHRcdH1cblx0fVxuXG5cblxuXHQvKiogXG5cdCAqIC9yZXF1aXJlZC9udW1iZXJcblx0ICogXG5cdCAqL1xuXHRleHBvcnQgbmFtZXNwYWNlIFJlcXVpcmVkLk51bWJlciB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9yZXF1aXJlZC9udW1iZXIgYWJzdHJhY3QgaGFuZGxlci4gXG5cdFx0Ki9cblx0XHRleHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RIYW5kbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xuXHRcdFx0YmFzZVVyaSA9IFwiL3JlcXVpcmVkL251bWJlclwiO1xuXHRcdFx0YmFzZVVyaVBhcmFtZXRlcnMgPSB7fTtcblx0XHRcdG1ldGhvZHMgPSB7XG5cdFx0XHRcdFwiZ2V0XCI6IHtcblx0XHRcdFx0XHRcImJvZHlcIjogZmFsc2UsXG5cdFx0XHRcdFx0XCJxdWVyeVN0cmluZ1wiOiB7XG5cdFx0XHRcdFx0XHRcInBhcmFtXCI6IHtcblx0XHRcdFx0XHRcdFx0XCJkaXNwbGF5TmFtZVwiOiBcInBhcmFtXCIsXG5cdFx0XHRcdFx0XHRcdFwidHlwZVwiOiBcIm51bWJlclwiLFxuXHRcdFx0XHRcdFx0XHRcInJlcXVpcmVkXCI6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbTogbnVtYmVyO1xuXHRcdFx0XHR9XG5cdFx0XHQpOiBQcm9taXNlPEdldFJlc3VsdHM+O1xuXHRcdH1cblx0fVxuXG5cblxuXG5cdC8qKiBcblx0ICogL25vbi1yZXF1aXJlZC9ib29sZWFuXG5cdCAqIFxuXHQgKi9cblx0ZXhwb3J0IG5hbWVzcGFjZSBOb24uUmVxdWlyZWQuQm9vbGVhbiB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9ub24tcmVxdWlyZWQvYm9vbGVhbiBhYnN0cmFjdCBoYW5kbGVyLiBcblx0XHQqL1xuXHRcdGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0XHRiYXNlVXJpID0gXCIvbm9uLXJlcXVpcmVkL2Jvb2xlYW5cIjtcblx0XHRcdGJhc2VVcmlQYXJhbWV0ZXJzID0ge307XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjoge1xuXHRcdFx0XHRcdFx0XCJwYXJhbVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiZGlzcGxheU5hbWVcIjogXCJwYXJhbVwiLFxuXHRcdFx0XHRcdFx0XHRcInR5cGVcIjogXCJib29sZWFuXCIsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbT86IGJvb2xlYW47XG5cdFx0XHRcdH1cblx0XHRcdCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG5cdFx0fVxuXHR9XG5cblxuXG5cdC8qKiBcblx0ICogL25vbi1yZXF1aXJlZC9kYXRlXG5cdCAqIFxuXHQgKi9cblx0ZXhwb3J0IG5hbWVzcGFjZSBOb24uUmVxdWlyZWQuRGF0ZSB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9ub24tcmVxdWlyZWQvZGF0ZSBhYnN0cmFjdCBoYW5kbGVyLiBcblx0XHQqL1xuXHRcdGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0XHRiYXNlVXJpID0gXCIvbm9uLXJlcXVpcmVkL2RhdGVcIjtcblx0XHRcdGJhc2VVcmlQYXJhbWV0ZXJzID0ge307XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjoge1xuXHRcdFx0XHRcdFx0XCJwYXJhbVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiZGlzcGxheU5hbWVcIjogXCJwYXJhbVwiLFxuXHRcdFx0XHRcdFx0XHRcInR5cGVcIjogXCJkYXRlXCIsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbT86IERhdGU7XG5cdFx0XHRcdH1cblx0XHRcdCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG5cdFx0fVxuXHR9XG5cblxuXG5cdC8qKiBcblx0ICogL25vbi1yZXF1aXJlZC9pbnRlZ2VyXG5cdCAqIFxuXHQgKi9cblx0ZXhwb3J0IG5hbWVzcGFjZSBOb24uUmVxdWlyZWQuSW50ZWdlciB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9ub24tcmVxdWlyZWQvaW50ZWdlciBhYnN0cmFjdCBoYW5kbGVyLiBcblx0XHQqL1xuXHRcdGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEhhbmRsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG5cdFx0XHRiYXNlVXJpID0gXCIvbm9uLXJlcXVpcmVkL2ludGVnZXJcIjtcblx0XHRcdGJhc2VVcmlQYXJhbWV0ZXJzID0ge307XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjoge1xuXHRcdFx0XHRcdFx0XCJwYXJhbVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiZGlzcGxheU5hbWVcIjogXCJwYXJhbVwiLFxuXHRcdFx0XHRcdFx0XHRcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbT86IG51bWJlcjtcblx0XHRcdFx0fVxuXHRcdFx0KTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcblx0XHR9XG5cdH1cblxuXG5cblx0LyoqIFxuXHQgKiAvbm9uLXJlcXVpcmVkL251bWJlclxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgTm9uLlJlcXVpcmVkLk51bWJlciB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9ub24tcmVxdWlyZWQvbnVtYmVyIGFic3RyYWN0IGhhbmRsZXIuIFxuXHRcdCovXG5cdFx0ZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SGFuZGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcblx0XHRcdGJhc2VVcmkgPSBcIi9ub24tcmVxdWlyZWQvbnVtYmVyXCI7XG5cdFx0XHRiYXNlVXJpUGFyYW1ldGVycyA9IHt9O1xuXHRcdFx0bWV0aG9kcyA9IHtcblx0XHRcdFx0XCJnZXRcIjoge1xuXHRcdFx0XHRcdFwiYm9keVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcInF1ZXJ5U3RyaW5nXCI6IHtcblx0XHRcdFx0XHRcdFwicGFyYW1cIjoge1xuXHRcdFx0XHRcdFx0XHRcImRpc3BsYXlOYW1lXCI6IFwicGFyYW1cIixcblx0XHRcdFx0XHRcdFx0XCJ0eXBlXCI6IFwibnVtYmVyXCIsXG5cdFx0XHRcdFx0XHRcdFwiZGVzY3JpcHRpb25cIjogXCJcIixcblx0XHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFyYW1cIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJoZWFkZXJzXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJzZWN1cmVkQnlcIjogW11cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHVyaVBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqIGdldCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGdldChcblx0XHRcdFx0cXVlcnlTdHJpbmc6IHtcblx0XHRcdFx0XHRwYXJhbT86IG51bWJlcjtcblx0XHRcdFx0fVxuXHRcdFx0KTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcblx0XHR9XG5cdH1cblxuXG5cblx0LyoqIFxuXHQgKiAvY3J1ZFxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCBuYW1lc3BhY2UgQ3J1ZCB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgdm9pZDtcblxuXG5cblx0XHQvKiBSZXNwb25zZSBwdXQgc3RhdHVzIDIwMCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBQdXRSZXN1bHQyMDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSAyMDA7IH1cblxuXHRcdGV4cG9ydCB0eXBlIFB1dFJlc3VsdHMgPSBQdXRSZXN1bHQyMDAgfCB2b2lkO1xuXG5cblxuXHRcdC8qIFJlc3BvbnNlIHBvc3Qgc3RhdHVzIDIwMSBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBQb3N0UmVzdWx0MjAxIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAxOyB9XG5cblx0XHRleHBvcnQgdHlwZSBQb3N0UmVzdWx0cyA9IFBvc3RSZXN1bHQyMDEgfCB2b2lkO1xuXG5cblxuXHRcdC8qIFJlc3BvbnNlIHBhdGNoIHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgUGF0Y2hSZXN1bHQyMDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSAyMDA7IH1cblx0XHQvKiBSZXNwb25zZSBwYXRjaCBzdGF0dXMgNDA0IGRvIG5vdCBkZXNjcmliZSBhbnkgc2NoZW1hIG5vciBNSU1FICovXG5cdFx0ZXhwb3J0IGNsYXNzIFBhdGNoUmVzdWx0NDA0IGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gNDA0OyB9XG5cblx0XHRleHBvcnQgdHlwZSBQYXRjaFJlc3VsdHMgPSBQYXRjaFJlc3VsdDIwMCB8IFBhdGNoUmVzdWx0NDA0IHwgdm9pZDtcblxuXG5cblx0XHQvKiBSZXNwb25zZSBkZWxldGUgc3RhdHVzIDIwMCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBEZWxldGVSZXN1bHQyMDAgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSAyMDA7IH1cblx0XHQvKiBSZXNwb25zZSBkZWxldGUgc3RhdHVzIDIwNCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBEZWxldGVSZXN1bHQyMDQgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSAyMDQ7IH1cblx0XHQvKiBSZXNwb25zZSBkZWxldGUgc3RhdHVzIDQwNCBkbyBub3QgZGVzY3JpYmUgYW55IHNjaGVtYSBub3IgTUlNRSAqL1xuXHRcdGV4cG9ydCBjbGFzcyBEZWxldGVSZXN1bHQ0MDQgZXh0ZW5kcyBCYXNlQ29udHJvbGxlclJlc3BvbnNlPGFueT4geyBzdGF0dXMgPSA0MDQ7IH1cblxuXHRcdGV4cG9ydCB0eXBlIERlbGV0ZVJlc3VsdHMgPSBEZWxldGVSZXN1bHQyMDAgfCBEZWxldGVSZXN1bHQyMDQgfCBEZWxldGVSZXN1bHQ0MDQgfCB2b2lkO1xuXG5cdFx0LyoqIFxuXHRcdCogL2NydWQgYWJzdHJhY3QgaGFuZGxlci4gXG5cdFx0Ki9cblx0XHRleHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RIYW5kbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xuXHRcdFx0YmFzZVVyaSA9IFwiL2NydWRcIjtcblx0XHRcdGJhc2VVcmlQYXJhbWV0ZXJzID0ge307XG5cdFx0XHRtZXRob2RzID0ge1xuXHRcdFx0XHRcImdldFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjoge1xuXHRcdFx0XHRcdFx0XCJpZFwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiZGlzcGxheU5hbWVcIjogXCJpZFwiLFxuXHRcdFx0XHRcdFx0XHRcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG5cdFx0XHRcdFx0XHRcdFwicmVxdWlyZWRcIjogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XCJkZXNjcmlwdGlvblwiOiBcIlJlc291cmNlIElEXCIsXG5cdFx0XHRcdFx0XHRcdFwibmFtZVwiOiBcImlkXCJcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiaGVhZGVyc1wiOiBudWxsLFxuXHRcdFx0XHRcdFwic2VjdXJlZEJ5XCI6IFtdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwicHV0XCI6IHtcblx0XHRcdFx0XHRcImJvZHlcIjogZmFsc2UsXG5cdFx0XHRcdFx0XCJxdWVyeVN0cmluZ1wiOiBudWxsLFxuXHRcdFx0XHRcdFwiaGVhZGVyc1wiOiBudWxsLFxuXHRcdFx0XHRcdFwic2VjdXJlZEJ5XCI6IFtdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwicG9zdFwiOiB7XG5cdFx0XHRcdFx0XCJib2R5XCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwicXVlcnlTdHJpbmdcIjogbnVsbCxcblx0XHRcdFx0XHRcImhlYWRlcnNcIjogbnVsbCxcblx0XHRcdFx0XHRcInNlY3VyZWRCeVwiOiBbXVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInBhdGNoXCI6IHtcblx0XHRcdFx0XHRcImJvZHlcIjogZmFsc2UsXG5cdFx0XHRcdFx0XCJxdWVyeVN0cmluZ1wiOiBudWxsLFxuXHRcdFx0XHRcdFwiaGVhZGVyc1wiOiBudWxsLFxuXHRcdFx0XHRcdFwic2VjdXJlZEJ5XCI6IFtdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVsZXRlXCI6IHtcblx0XHRcdFx0XHRcImJvZHlcIjogZmFsc2UsXG5cdFx0XHRcdFx0XCJxdWVyeVN0cmluZ1wiOiBudWxsLFxuXHRcdFx0XHRcdFwiaGVhZGVyc1wiOiBudWxsLFxuXHRcdFx0XHRcdFwic2VjdXJlZEJ5XCI6IFtdXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR1cmlQYXJhbWV0ZXJzID0ge1xuXG5cdFx0XHR9XG5cblx0XHRcdC8qKiBnZXQgbWV0aG9kICovXG5cdFx0XHRhYnN0cmFjdCBhc3luYyBnZXQoXG5cdFx0XHRcdHF1ZXJ5U3RyaW5nOiB7XG5cdFx0XHRcdFx0LyoqIFJlc291cmNlIElEICovXG5cdFx0XHRcdFx0aWQ6IG51bWJlcjtcblx0XHRcdFx0fVxuXHRcdFx0KTogUHJvbWlzZTxHZXRSZXN1bHRzPjtcblxuXHRcdFx0LyoqIHB1dCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIHB1dCgpOiBQcm9taXNlPFB1dFJlc3VsdHM+O1xuXG5cdFx0XHQvKiogcG9zdCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIHBvc3QoKTogUHJvbWlzZTxQb3N0UmVzdWx0cz47XG5cblx0XHRcdC8qKiBwYXRjaCBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIHBhdGNoKCk6IFByb21pc2U8UGF0Y2hSZXN1bHRzPjtcblxuXHRcdFx0LyoqIGRlbGV0ZSBtZXRob2QgKi9cblx0XHRcdGFic3RyYWN0IGFzeW5jIGRlbGV0ZSgpOiBQcm9taXNlPERlbGV0ZVJlc3VsdHM+O1xuXHRcdH1cblx0fVxuXG5cblxuXHQvKiogXG5cdCAqIC9wb3B1bGFybWVkaWFcblx0ICogXG5cdCAqL1xuXHRleHBvcnQgbmFtZXNwYWNlIFBvcHVsYXJtZWRpYSB7XG5cblxuXG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyAyMDAgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0MjAwIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gMjAwOyB9XG5cdFx0LyogUmVzcG9uc2UgZ2V0IHN0YXR1cyA1MDMgZG8gbm90IGRlc2NyaWJlIGFueSBzY2hlbWEgbm9yIE1JTUUgKi9cblx0XHRleHBvcnQgY2xhc3MgR2V0UmVzdWx0NTAzIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJSZXNwb25zZTxhbnk+IHsgc3RhdHVzID0gNTAzOyB9XG5cblx0XHRleHBvcnQgdHlwZSBHZXRSZXN1bHRzID0gR2V0UmVzdWx0MjAwIHwgR2V0UmVzdWx0NTAzIHwgdm9pZDtcblxuXHRcdC8qKiBcblx0XHQqIC9wb3B1bGFybWVkaWEgYWJzdHJhY3QgaGFuZGxlci4gXG5cdFx0Ki9cblx0XHRleHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RIYW5kbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xuXHRcdFx0YmFzZVVyaSA9IFwiL3BvcHVsYXJtZWRpYVwiO1xuXHRcdFx0YmFzZVVyaVBhcmFtZXRlcnMgPSB7fTtcblx0XHRcdG1ldGhvZHMgPSB7XG5cdFx0XHRcdFwiZ2V0XCI6IHtcblx0XHRcdFx0XHRcImJvZHlcIjogZmFsc2UsXG5cdFx0XHRcdFx0XCJxdWVyeVN0cmluZ1wiOiBudWxsLFxuXHRcdFx0XHRcdFwiaGVhZGVyc1wiOiBudWxsLFxuXHRcdFx0XHRcdFwic2VjdXJlZEJ5XCI6IFtdXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR1cmlQYXJhbWV0ZXJzID0ge1xuXG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0KiBHZXQgYSBsaXN0IG9mIHdoYXQgbWVkaWEgaXMgbW9zdCBwb3B1bGFyIGF0IHRoZSBtb21lbnQuXG5cdFx0XHQqL1xuXHRcdFx0YWJzdHJhY3QgYXN5bmMgZ2V0KCk6IFByb21pc2U8R2V0UmVzdWx0cz47XG5cdFx0fVxuXHR9XG5cbn1cbiJdfQ==