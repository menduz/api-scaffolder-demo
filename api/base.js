// THIS IS AN AUTOGENERATED FILE, ANY CHANGES WILL BE LOST. DO NO EDIT THIS FILE
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var ospreyRouter = require('osprey-router');
var bodyParser = require('body-parser');
/// DemoApi
var DemoApiV1;
(function (DemoApiV1) {
    var theRouter = ospreyRouter();
    const contextSymbol = Symbol('request-context');
    class BaseControllerResponse {
        constructor(data) {
            this.data = data;
            this.status = 200;
        }
    }
    DemoApiV1.BaseControllerResponse = BaseControllerResponse;
    function getMiddleware() {
        return theRouter;
    }
    DemoApiV1.getMiddleware = getMiddleware;
    function getContext(expressRequest) {
        return (expressRequest[contextSymbol] = (expressRequest[contextSymbol] || {}));
    }
    DemoApiV1.getContext = getContext;
    var SecurityMiddlewares;
    (function (SecurityMiddlewares) {
        SecurityMiddlewares.securitySettings = {};
        function no_authenticate(req, res, next) {
            next();
        }
        SecurityMiddlewares.no_authenticate = no_authenticate;
    })(SecurityMiddlewares = DemoApiV1.SecurityMiddlewares || (DemoApiV1.SecurityMiddlewares = {}));
    var SecurityMiddlewaresInvokers;
    (function (SecurityMiddlewaresInvokers) {
        SecurityMiddlewaresInvokers.no_authenticate = (req, res, next) => SecurityMiddlewares.no_authenticate(req, res, next);
    })(SecurityMiddlewaresInvokers || (SecurityMiddlewaresInvokers = {}));
    /**
     * @param {Array} list of middleware to combine
     */
    function concatMiddlewares(list) {
        return function (req, res, next) {
            function iter(i) {
                var mid = list[i];
                if (!mid)
                    return next();
                mid(req, res, function (err) {
                    if (err)
                        return next(err);
                    iter(i + 1);
                });
            }
            iter(0);
        };
    }
    class BaseController {
        /** Register this resource in the specified osprey-router. */
        registerRouter(ospreyRouter) {
            if (!ospreyRouter)
                ospreyRouter = theRouter;
            for (let verb in this.methods) {
                let method = this.methods[verb];
                ospreyRouter[verb](this.baseUri, this.baseUriParameters, this.getRequestHandler(verb, method));
            }
        }
        generateQueryStringParams(params) {
            var queryString = {};
            for (let i in params) {
                let parameter = params[i];
                queryString[i] = parameter.name in this.currentContext.request.query ? this.currentContext.request.query[parameter.name] : parameter.default;
                // if it's required
                if (!(parameter.name in this.currentContext.request.query) && parameter.required && !('default' in parameter)) {
                    throw new Error("Missing query string parameter " + parameter.name);
                }
                if (parameter.name in this.currentContext.request.query) {
                    if (parameter.type == "number" || parameter.type == "integer") {
                        if (typeof queryString[i] != "undefined" && typeof queryString[i] != "number") {
                            if (parameter.type == "number")
                                queryString[i] = parseFloat(queryString[i]);
                            else
                                queryString[i] = parseInt(queryString[i]);
                            if (isNaN(queryString[i])) {
                                if (parameter.required) {
                                    throw new Error("Invalid query string parameter " + parameter.name + ": " + JSON.stringify(this.currentContext.request.query[parameter.name]));
                                }
                                else {
                                    queryString[i] = parameter.default || null;
                                }
                            }
                        }
                    }
                    if (parameter.type == "boolean") {
                        if (typeof queryString[i] != "boolean") {
                            if (!queryString[i] || queryString[i] == "0" || queryString[i] == "false" || queryString[i] == "")
                                queryString[i] = false;
                            else
                                queryString[i] = true;
                        }
                    }
                    if (parameter.type == "date") {
                        if (!(queryString[i] instanceof Date)) {
                            queryString[i] = new Date(queryString[i]);
                            if (isNaN(queryString[i]))
                                queryString[i] = parameter.default || null;
                        }
                    }
                }
            }
            return queryString;
        }
        generateHeaderParams(headers) {
            var ret = {};
            for (let i in headers) {
                let header = headers[i];
                ret[i] = this.currentContext.request.get(header.name) || header.default;
            }
            return ret;
        }
        getRequestHandler(name, method) {
            let middleware = (req, res, next) => {
                this.setUpCurrentContext(req, res);
                let args = [];
                if (method.body) {
                    if (typeof method.body == "function") {
                        method.body(req, res, next);
                    }
                    else {
                        bodyParser.json()(req, res, next);
                    }
                    args.push(this.currentContext.request.body);
                }
                if (method.queryString) {
                    args.push(this.generateQueryStringParams(method.queryString));
                }
                if (method.headers) {
                    args.push(this.generateHeaderParams(method.headers));
                }
                try {
                    this[name].apply(this, args).then((r) => {
                        if (r && r instanceof BaseControllerResponse) {
                            res.status(r.status);
                            if (r.mime) {
                                res.set('Content-Type', r.mime);
                            }
                            if (r.mime == 'application/json') {
                                res.json(r.data);
                            }
                            else {
                                res.send(r.data);
                            }
                            return;
                        }
                        else if (!r) {
                            next();
                            return;
                        }
                        if (r && r instanceof Error)
                            next(r);
                        else
                            next(new Error('Unknown method result ' + name.toUpperCase() + ' ' + this.baseUri));
                    }).catch(next);
                }
                catch (e) {
                    next(e);
                }
            };
            if (method.securedBy.length) {
                return concatMiddlewares(method
                    .securedBy
                    .map(securitySchema => SecurityMiddlewaresInvokers[securitySchema])
                    .concat(middleware));
            }
            else {
                return middleware;
            }
        }
        setUpCurrentContext(req, res, ctx) {
            this.currentContext = {
                request: req,
                response: res,
                context: getContext(req)
            };
            this.fillUriParameters(this.currentContext.request.params);
        }
        fillUriParameters(params) {
            if (!params)
                return;
            for (var param in this.baseUriParameters) {
                if (param in params) {
                    this.uriParameters[param] = params[param];
                }
            }
        }
    }
    DemoApiV1.BaseController = BaseController;
    /**
     * /me
     *
     */
    var Me;
    (function (Me) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        Me.GetResult200 = GetResult200;
        /**
        * /me abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/me";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": null,
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Me.AbstractHandler = AbstractHandler;
    })(Me = DemoApiV1.Me || (DemoApiV1.Me = {}));
    /**
     * /users/{userId}
     *
     */
    var UserById;
    (function (UserById) {
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
                this.mime = "application/json";
            }
        }
        UserById.GetResult200 = GetResult200;
        /**
        * /users/{userId} abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/users/{userId}";
                this.baseUriParameters = {
                    "userId": {
                        "displayName": "userId",
                        "type": "string",
                        "required": true,
                        "description": ""
                    }
                };
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": {
                            "filter": {
                                "displayName": "filter",
                                "type": "string",
                                "description": "",
                                "name": "filter"
                            }
                        },
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {
                    userId: void (0)
                };
            }
        }
        UserById.AbstractHandler = AbstractHandler;
    })(UserById = DemoApiV1.UserById || (DemoApiV1.UserById = {}));
    /**
     * /status
     *
     */
    var Status;
    (function (Status) {
        /* Response get status 200 do not describe any schema nor MIME */
        class GetResult200 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 200;
            }
        }
        Status.GetResult200 = GetResult200;
        /* Response get status 202 do not describe any schema nor MIME */
        class GetResult202 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 202;
            }
        }
        Status.GetResult202 = GetResult202;
        /* Response get status 401 do not describe any schema nor MIME */
        class GetResult401 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 401;
            }
        }
        Status.GetResult401 = GetResult401;
        /* Response get status 404 do not describe any schema nor MIME */
        class GetResult404 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 404;
            }
        }
        Status.GetResult404 = GetResult404;
        /* Response get status 500 do not describe any schema nor MIME */
        class GetResult500 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 500;
            }
        }
        Status.GetResult500 = GetResult500;
        /* Response get status 505 do not describe any schema nor MIME */
        class GetResult505 extends BaseControllerResponse {
            constructor(...args) {
                super(...args);
                this.status = 505;
            }
        }
        Status.GetResult505 = GetResult505;
        /**
        * /status abstract handler.
        */
        class AbstractHandler extends BaseController {
            constructor(...args) {
                super(...args);
                this.baseUri = "/status";
                this.baseUriParameters = {};
                this.methods = {
                    "get": {
                        "body": false,
                        "queryString": {
                            "desiredStatus": {
                                "displayName": "desiredStatus",
                                "type": "integer",
                                "required": true,
                                "description": "",
                                "name": "desiredStatus"
                            }
                        },
                        "headers": null,
                        "securedBy": []
                    }
                };
                this.uriParameters = {};
            }
        }
        Status.AbstractHandler = AbstractHandler;
    })(Status = DemoApiV1.Status || (DemoApiV1.Status = {}));
    /**
     * /required/boolean
     *
     */
    var Required;
    (function (Required) {
        var Boolean;
        (function (Boolean) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Boolean.GetResult200 = GetResult200;
            /**
            * /required/boolean abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/boolean";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "boolean",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Boolean.AbstractHandler = AbstractHandler;
        })(Boolean = Required.Boolean || (Required.Boolean = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /required/date
     *
     */
    var Required;
    (function (Required) {
        var Date;
        (function (Date) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Date.GetResult200 = GetResult200;
            /**
            * /required/date abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/date";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "date",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Date.AbstractHandler = AbstractHandler;
        })(Date = Required.Date || (Required.Date = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /required/integer
     *
     */
    var Required;
    (function (Required) {
        var Integer;
        (function (Integer) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Integer.GetResult200 = GetResult200;
            /**
            * /required/integer abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/integer";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "integer",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Integer.AbstractHandler = AbstractHandler;
        })(Integer = Required.Integer || (Required.Integer = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /required/number
     *
     */
    var Required;
    (function (Required) {
        var Number;
        (function (Number) {
            /* Response get status 200 do not describe any schema nor MIME */
            class GetResult200 extends BaseControllerResponse {
                constructor(...args) {
                    super(...args);
                    this.status = 200;
                }
            }
            Number.GetResult200 = GetResult200;
            /**
            * /required/number abstract handler.
            */
            class AbstractHandler extends BaseController {
                constructor(...args) {
                    super(...args);
                    this.baseUri = "/required/number";
                    this.baseUriParameters = {};
                    this.methods = {
                        "get": {
                            "body": false,
                            "queryString": {
                                "param": {
                                    "displayName": "param",
                                    "type": "number",
                                    "required": true,
                                    "description": "",
                                    "name": "param"
                                }
                            },
                            "headers": null,
                            "securedBy": []
                        }
                    };
                    this.uriParameters = {};
                }
            }
            Number.AbstractHandler = AbstractHandler;
        })(Number = Required.Number || (Required.Number = {}));
    })(Required = DemoApiV1.Required || (DemoApiV1.Required = {}));
    /**
     * /non-required/boolean
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Boolean;
            (function (Boolean) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Boolean.GetResult200 = GetResult200;
                /**
                * /non-required/boolean abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/boolean";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "boolean",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Boolean.AbstractHandler = AbstractHandler;
            })(Boolean = Required.Boolean || (Required.Boolean = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /non-required/date
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Date;
            (function (Date) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Date.GetResult200 = GetResult200;
                /**
                * /non-required/date abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/date";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "date",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Date.AbstractHandler = AbstractHandler;
            })(Date = Required.Date || (Required.Date = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /non-required/integer
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Integer;
            (function (Integer) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Integer.GetResult200 = GetResult200;
                /**
                * /non-required/integer abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/integer";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "integer",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Integer.AbstractHandler = AbstractHandler;
            })(Integer = Required.Integer || (Required.Integer = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
    /**
     * /non-required/number
     *
     */
    var Non;
    (function (Non) {
        var Required;
        (function (Required) {
            var Number;
            (function (Number) {
                /* Response get status 200 do not describe any schema nor MIME */
                class GetResult200 extends BaseControllerResponse {
                    constructor(...args) {
                        super(...args);
                        this.status = 200;
                    }
                }
                Number.GetResult200 = GetResult200;
                /**
                * /non-required/number abstract handler.
                */
                class AbstractHandler extends BaseController {
                    constructor(...args) {
                        super(...args);
                        this.baseUri = "/non-required/number";
                        this.baseUriParameters = {};
                        this.methods = {
                            "get": {
                                "body": false,
                                "queryString": {
                                    "param": {
                                        "displayName": "param",
                                        "type": "number",
                                        "description": "",
                                        "name": "param"
                                    }
                                },
                                "headers": null,
                                "securedBy": []
                            }
                        };
                        this.uriParameters = {};
                    }
                }
                Number.AbstractHandler = AbstractHandler;
            })(Number = Required.Number || (Required.Number = {}));
        })(Required = Non.Required || (Non.Required = {}));
    })(Non = DemoApiV1.Non || (DemoApiV1.Non = {}));
})(DemoApiV1 = exports.DemoApiV1 || (exports.DemoApiV1 = {}));
//# sourceMappingURL=data:application/json;base64,