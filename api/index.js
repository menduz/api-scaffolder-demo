"use strict";
const base_1 = require('./base');
const controllers = [];
// /me
controllers.push(require('./impl/me'));
// /users/{userId}
controllers.push(require('./impl/userById'));
// /status
controllers.push(require('./impl/status'));
// /required/boolean
controllers.push(require('./impl/required/boolean'));
// /required/date
controllers.push(require('./impl/required/date'));
// /required/integer
controllers.push(require('./impl/required/integer'));
// /required/number
controllers.push(require('./impl/required/number'));
// /non-required/boolean
controllers.push(require('./impl/non/required/boolean'));
// /non-required/date
controllers.push(require('./impl/non/required/date'));
// /non-required/integer
controllers.push(require('./impl/non/required/integer'));
// /non-required/number
controllers.push(require('./impl/non/required/number'));
/** generates a new instance of each controller of the api. */
function initializeControllers() {
    let instances = [];
    controllers.forEach(x => {
        instances.push(new x.Controller());
    });
    return instances;
}
exports.initializeControllers = initializeControllers;
/** registers the controllers on a router */
function registerRouter(controllers, router) {
    if (!controllers)
        controllers = initializeControllers();
    if (!router)
        router = getMiddleware();
    controllers.forEach(x => x.registerRouter(router));
    return controllers;
}
exports.registerRouter = registerRouter;
/** gets the router */
function getMiddleware() {
    return base_1.DemoApiV1.getMiddleware();
}
exports.getMiddleware = getMiddleware;
/** gets the context reference of the given request */
function getContext(expressRequest) {
    return base_1.DemoApiV1.getContext(expressRequest);
}
exports.getContext = getContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsdUJBQTBCLFFBQVEsQ0FBQyxDQUFBO0FBRW5DLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUd2QixNQUFNO0FBQ04sV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUV2QyxrQkFBa0I7QUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0FBRTdDLFVBQVU7QUFDVixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBRTNDLG9CQUFvQjtBQUNwQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7QUFFckQsaUJBQWlCO0FBQ2pCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztBQUVsRCxvQkFBb0I7QUFDcEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO0FBRXJELG1CQUFtQjtBQUNuQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7QUFFcEQsd0JBQXdCO0FBQ3hCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQztBQUV6RCxxQkFBcUI7QUFDckIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO0FBRXRELHdCQUF3QjtBQUN4QixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7QUFFekQsdUJBQXVCO0FBQ3ZCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQztBQUl4RCw4REFBOEQ7QUFDOUQ7SUFDRSxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFbkIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVJlLDZCQUFxQix3QkFRcEMsQ0FBQTtBQUVELDRDQUE0QztBQUM1Qyx3QkFBK0IsV0FBd0MsRUFBRSxNQUFPO0lBQzVFLEVBQUUsQ0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQUMsV0FBVyxHQUFHLHFCQUFxQixFQUFFLENBQUM7SUFDdkQsRUFBRSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFBQyxNQUFNLEdBQUcsYUFBYSxFQUFFLENBQUM7SUFDckMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdkIsQ0FBQztBQUxlLHNCQUFjLGlCQUs3QixDQUFBO0FBRUQsc0JBQXNCO0FBQ3RCO0lBQ0ksTUFBTSxDQUFDLGdCQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDckMsQ0FBQztBQUZlLHFCQUFhLGdCQUU1QixDQUFBO0FBRUQsc0RBQXNEO0FBQ3RELG9CQUEyQixjQUErQjtJQUN0RCxNQUFNLENBQUMsZ0JBQVMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUZlLGtCQUFVLGFBRXpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFOIEFVVE9HRU5FUkFURUQgRklMRSwgQU5ZIENIQU5HRVMgV0lMTCBCRSBMT1NULiBETyBOTyBFRElUIFRISVMgRklMRVxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgRGVtb0FwaVYxIH0gZnJvbSAnLi9iYXNlJztcblxuY29uc3QgY29udHJvbGxlcnMgPSBbXTtcblxuXG4vLyAvbWVcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL21lJykpO1xuXG4vLyAvdXNlcnMve3VzZXJJZH1cbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3VzZXJCeUlkJykpO1xuXG4vLyAvc3RhdHVzXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9zdGF0dXMnKSk7XG5cbi8vIC9yZXF1aXJlZC9ib29sZWFuXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9yZXF1aXJlZC9ib29sZWFuJykpO1xuXG4vLyAvcmVxdWlyZWQvZGF0ZVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcmVxdWlyZWQvZGF0ZScpKTtcblxuLy8gL3JlcXVpcmVkL2ludGVnZXJcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3JlcXVpcmVkL2ludGVnZXInKSk7XG5cbi8vIC9yZXF1aXJlZC9udW1iZXJcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3JlcXVpcmVkL251bWJlcicpKTtcblxuLy8gL25vbi1yZXF1aXJlZC9ib29sZWFuXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9ub24vcmVxdWlyZWQvYm9vbGVhbicpKTtcblxuLy8gL25vbi1yZXF1aXJlZC9kYXRlXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9ub24vcmVxdWlyZWQvZGF0ZScpKTtcblxuLy8gL25vbi1yZXF1aXJlZC9pbnRlZ2VyXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9ub24vcmVxdWlyZWQvaW50ZWdlcicpKTtcblxuLy8gL25vbi1yZXF1aXJlZC9udW1iZXJcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9udW1iZXInKSk7XG5cblxuXG4vKiogZ2VuZXJhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGVhY2ggY29udHJvbGxlciBvZiB0aGUgYXBpLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVDb250cm9sbGVycygpOiBEZW1vQXBpVjEuQmFzZUNvbnRyb2xsZXJbXSB7XG4gIGxldCBpbnN0YW5jZXMgPSBbXTtcbiAgXG4gIGNvbnRyb2xsZXJzLmZvckVhY2goeCA9PiB7XG4gICAgaW5zdGFuY2VzLnB1c2gobmV3IHguQ29udHJvbGxlcigpKTtcbiAgfSk7XG4gIFxuICByZXR1cm4gaW5zdGFuY2VzO1xufVxuXG4vKiogcmVnaXN0ZXJzIHRoZSBjb250cm9sbGVycyBvbiBhIHJvdXRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyUm91dGVyKGNvbnRyb2xsZXJzPzogRGVtb0FwaVYxLkJhc2VDb250cm9sbGVyW10sIHJvdXRlcj8pe1xuICAgIGlmKCFjb250cm9sbGVycykgY29udHJvbGxlcnMgPSBpbml0aWFsaXplQ29udHJvbGxlcnMoKTtcbiAgICBpZighcm91dGVyKSByb3V0ZXIgPSBnZXRNaWRkbGV3YXJlKCk7XG4gICAgY29udHJvbGxlcnMuZm9yRWFjaCh4ID0+IHgucmVnaXN0ZXJSb3V0ZXIocm91dGVyKSk7XG4gICAgcmV0dXJuIGNvbnRyb2xsZXJzO1xufVxuXG4vKiogZ2V0cyB0aGUgcm91dGVyICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWlkZGxld2FyZSgpe1xuICAgIHJldHVybiBEZW1vQXBpVjEuZ2V0TWlkZGxld2FyZSgpO1xufVxuXG4vKiogZ2V0cyB0aGUgY29udGV4dCByZWZlcmVuY2Ugb2YgdGhlIGdpdmVuIHJlcXVlc3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KGV4cHJlc3NSZXF1ZXN0OiBleHByZXNzLlJlcXVlc3QpOiBJQ29udGV4dCB7XG4gICAgcmV0dXJuIERlbW9BcGlWMS5nZXRDb250ZXh0KGV4cHJlc3NSZXF1ZXN0KTtcbn0iXX0=