"use strict";
const base_1 = require('./base');
const controllers = [];
// /me
controllers.push(require('./impl/me'));
// /users/{userId}
controllers.push(require('./impl/userById'));
// /status
controllers.push(require('./impl/status'));
// /required/boolean
controllers.push(require('./impl/required/boolean'));
// /required/date
controllers.push(require('./impl/required/date'));
// /required/integer
controllers.push(require('./impl/required/integer'));
// /required/number
controllers.push(require('./impl/required/number'));
// /non-required/boolean
controllers.push(require('./impl/non/required/boolean'));
// /non-required/date
controllers.push(require('./impl/non/required/date'));
// /non-required/integer
controllers.push(require('./impl/non/required/integer'));
// /non-required/number
controllers.push(require('./impl/non/required/number'));
// /crud
controllers.push(require('./impl/crud'));
// /popularmedia
controllers.push(require('./impl/popularmedia'));
/** generates a new instance of each controller of the api. */
function initializeControllers() {
    let instances = [];
    controllers.forEach(x => {
        instances.push(new x.Controller());
    });
    return instances;
}
exports.initializeControllers = initializeControllers;
/** registers the controllers on a router */
function registerRouter(controllers, router) {
    if (!controllers)
        controllers = initializeControllers();
    if (!router)
        router = getMiddleware();
    controllers.forEach(x => x.registerRouter(router));
    return controllers;
}
exports.registerRouter = registerRouter;
/** gets the router */
function getMiddleware() {
    return base_1.DemoApiV1.getMiddleware();
}
exports.getMiddleware = getMiddleware;
/** gets the context reference of the given request */
function getContext(expressRequest) {
    return base_1.DemoApiV1.getContext(expressRequest);
}
exports.getContext = getContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsdUJBQTBCLFFBQVEsQ0FBQyxDQUFBO0FBRW5DLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUd2QixNQUFNO0FBQ04sV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUV2QyxrQkFBa0I7QUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0FBRTdDLFVBQVU7QUFDVixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBRTNDLG9CQUFvQjtBQUNwQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7QUFFckQsaUJBQWlCO0FBQ2pCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztBQUVsRCxvQkFBb0I7QUFDcEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO0FBRXJELG1CQUFtQjtBQUNuQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7QUFFcEQsd0JBQXdCO0FBQ3hCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQztBQUV6RCxxQkFBcUI7QUFDckIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO0FBRXRELHdCQUF3QjtBQUN4QixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7QUFFekQsdUJBQXVCO0FBQ3ZCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQztBQUV4RCxRQUFRO0FBQ1IsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUV6QyxnQkFBZ0I7QUFDaEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0FBSWpELDhEQUE4RDtBQUM5RDtJQUNDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUVuQixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNsQixDQUFDO0FBUmUsNkJBQXFCLHdCQVFwQyxDQUFBO0FBRUQsNENBQTRDO0FBQzVDLHdCQUErQixXQUF3QyxFQUFFLE1BQU87SUFDNUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFBQyxXQUFXLEdBQUcscUJBQXFCLEVBQUUsQ0FBQztJQUN4RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUFDLE1BQU0sR0FBRyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUN2QixDQUFDO0FBTGUsc0JBQWMsaUJBSzdCLENBQUE7QUFFRCxzQkFBc0I7QUFDdEI7SUFDSSxNQUFNLENBQUMsZ0JBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNyQyxDQUFDO0FBRmUscUJBQWEsZ0JBRTVCLENBQUE7QUFFRCxzREFBc0Q7QUFDdEQsb0JBQTJCLGNBQStCO0lBQ3RELE1BQU0sQ0FBQyxnQkFBUyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRmUsa0JBQVUsYUFFekIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgSVMgQU4gQVVUT0dFTkVSQVRFRCBGSUxFLCBBTlkgQ0hBTkdFUyBXSUxMIEJFIExPU1QuIERPIE5PIEVESVQgVEhJUyBGSUxFXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBEZW1vQXBpVjEgfSBmcm9tICcuL2Jhc2UnO1xuXG5jb25zdCBjb250cm9sbGVycyA9IFtdO1xuXG5cbi8vIC9tZVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbWUnKSk7XG5cbi8vIC91c2Vycy97dXNlcklkfVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvdXNlckJ5SWQnKSk7XG5cbi8vIC9zdGF0dXNcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3N0YXR1cycpKTtcblxuLy8gL3JlcXVpcmVkL2Jvb2xlYW5cbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3JlcXVpcmVkL2Jvb2xlYW4nKSk7XG5cbi8vIC9yZXF1aXJlZC9kYXRlXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9yZXF1aXJlZC9kYXRlJykpO1xuXG4vLyAvcmVxdWlyZWQvaW50ZWdlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcmVxdWlyZWQvaW50ZWdlcicpKTtcblxuLy8gL3JlcXVpcmVkL251bWJlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcmVxdWlyZWQvbnVtYmVyJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL2Jvb2xlYW5cbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9ib29sZWFuJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL2RhdGVcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9kYXRlJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL2ludGVnZXJcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9pbnRlZ2VyJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL251bWJlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbm9uL3JlcXVpcmVkL251bWJlcicpKTtcblxuLy8gL2NydWRcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL2NydWQnKSk7XG5cbi8vIC9wb3B1bGFybWVkaWFcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3BvcHVsYXJtZWRpYScpKTtcblxuXG5cbi8qKiBnZW5lcmF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgZWFjaCBjb250cm9sbGVyIG9mIHRoZSBhcGkuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRyb2xsZXJzKCk6IERlbW9BcGlWMS5CYXNlQ29udHJvbGxlcltdIHtcblx0bGV0IGluc3RhbmNlcyA9IFtdO1xuXG5cdGNvbnRyb2xsZXJzLmZvckVhY2goeCA9PiB7XG5cdFx0aW5zdGFuY2VzLnB1c2gobmV3IHguQ29udHJvbGxlcigpKTtcblx0fSk7XG5cblx0cmV0dXJuIGluc3RhbmNlcztcbn1cblxuLyoqIHJlZ2lzdGVycyB0aGUgY29udHJvbGxlcnMgb24gYSByb3V0ZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclJvdXRlcihjb250cm9sbGVycz86IERlbW9BcGlWMS5CYXNlQ29udHJvbGxlcltdLCByb3V0ZXI/KSB7XG4gICAgaWYgKCFjb250cm9sbGVycykgY29udHJvbGxlcnMgPSBpbml0aWFsaXplQ29udHJvbGxlcnMoKTtcbiAgICBpZiAoIXJvdXRlcikgcm91dGVyID0gZ2V0TWlkZGxld2FyZSgpO1xuICAgIGNvbnRyb2xsZXJzLmZvckVhY2goeCA9PiB4LnJlZ2lzdGVyUm91dGVyKHJvdXRlcikpO1xuICAgIHJldHVybiBjb250cm9sbGVycztcbn1cblxuLyoqIGdldHMgdGhlIHJvdXRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1pZGRsZXdhcmUoKSB7XG4gICAgcmV0dXJuIERlbW9BcGlWMS5nZXRNaWRkbGV3YXJlKCk7XG59XG5cbi8qKiBnZXRzIHRoZSBjb250ZXh0IHJlZmVyZW5jZSBvZiB0aGUgZ2l2ZW4gcmVxdWVzdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQoZXhwcmVzc1JlcXVlc3Q6IGV4cHJlc3MuUmVxdWVzdCk6IElDb250ZXh0IHtcbiAgICByZXR1cm4gRGVtb0FwaVYxLmdldENvbnRleHQoZXhwcmVzc1JlcXVlc3QpO1xufVxuIl19