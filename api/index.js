"use strict";
const base_1 = require('./base');
const controllers = [];
// /me
controllers.push(require('./impl/me'));
/** generates a new instance of each controller of the api. */
function initializeControllers() {
    let instances = [];
    controllers.forEach(x => {
        instances.push(new x.Controller());
    });
    return instances;
}
exports.initializeControllers = initializeControllers;
/** registers the controllers on a router */
function registerRouter(controllers, router) {
    if (!controllers)
        controllers = initializeControllers();
    if (!router)
        router = getMiddleware();
    controllers.forEach(x => x.registerRouter(router));
    return controllers;
}
exports.registerRouter = registerRouter;
/** gets the router */
function getMiddleware() {
    return base_1.DemoApiV1.getMiddleware();
}
exports.getMiddleware = getMiddleware;
/** gets the context reference of the given request */
function getContext(expressRequest) {
    return base_1.DemoApiV1.getContext(expressRequest);
}
exports.getContext = getContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsdUJBQTBCLFFBQVEsQ0FBQyxDQUFBO0FBRW5DLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUd2QixNQUFNO0FBQ04sV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUl2Qyw4REFBOEQ7QUFDOUQ7SUFDRSxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFbkIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVJlLDZCQUFxQix3QkFRcEMsQ0FBQTtBQUVELDRDQUE0QztBQUM1Qyx3QkFBK0IsV0FBd0MsRUFBRSxNQUFPO0lBQzVFLEVBQUUsQ0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQUMsV0FBVyxHQUFHLHFCQUFxQixFQUFFLENBQUM7SUFDdkQsRUFBRSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFBQyxNQUFNLEdBQUcsYUFBYSxFQUFFLENBQUM7SUFDckMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdkIsQ0FBQztBQUxlLHNCQUFjLGlCQUs3QixDQUFBO0FBRUQsc0JBQXNCO0FBQ3RCO0lBQ0ksTUFBTSxDQUFDLGdCQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDckMsQ0FBQztBQUZlLHFCQUFhLGdCQUU1QixDQUFBO0FBRUQsc0RBQXNEO0FBQ3RELG9CQUEyQixjQUErQjtJQUN0RCxNQUFNLENBQUMsZ0JBQVMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUZlLGtCQUFVLGFBRXpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFOIEFVVE9HRU5FUkFURUQgRklMRSwgQU5ZIENIQU5HRVMgV0lMTCBCRSBMT1NULiBETyBOTyBFRElUIFRISVMgRklMRVxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgRGVtb0FwaVYxIH0gZnJvbSAnLi9iYXNlJztcblxuY29uc3QgY29udHJvbGxlcnMgPSBbXTtcblxuXG4vLyAvbWVcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL21lJykpO1xuXG5cblxuLyoqIGdlbmVyYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBlYWNoIGNvbnRyb2xsZXIgb2YgdGhlIGFwaS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplQ29udHJvbGxlcnMoKTogRGVtb0FwaVYxLkJhc2VDb250cm9sbGVyW10ge1xuICBsZXQgaW5zdGFuY2VzID0gW107XG4gIFxuICBjb250cm9sbGVycy5mb3JFYWNoKHggPT4ge1xuICAgIGluc3RhbmNlcy5wdXNoKG5ldyB4LkNvbnRyb2xsZXIoKSk7XG4gIH0pO1xuICBcbiAgcmV0dXJuIGluc3RhbmNlcztcbn1cblxuLyoqIHJlZ2lzdGVycyB0aGUgY29udHJvbGxlcnMgb24gYSByb3V0ZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclJvdXRlcihjb250cm9sbGVycz86IERlbW9BcGlWMS5CYXNlQ29udHJvbGxlcltdLCByb3V0ZXI/KXtcbiAgICBpZighY29udHJvbGxlcnMpIGNvbnRyb2xsZXJzID0gaW5pdGlhbGl6ZUNvbnRyb2xsZXJzKCk7XG4gICAgaWYoIXJvdXRlcikgcm91dGVyID0gZ2V0TWlkZGxld2FyZSgpO1xuICAgIGNvbnRyb2xsZXJzLmZvckVhY2goeCA9PiB4LnJlZ2lzdGVyUm91dGVyKHJvdXRlcikpO1xuICAgIHJldHVybiBjb250cm9sbGVycztcbn1cblxuLyoqIGdldHMgdGhlIHJvdXRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1pZGRsZXdhcmUoKXtcbiAgICByZXR1cm4gRGVtb0FwaVYxLmdldE1pZGRsZXdhcmUoKTtcbn1cblxuLyoqIGdldHMgdGhlIGNvbnRleHQgcmVmZXJlbmNlIG9mIHRoZSBnaXZlbiByZXF1ZXN0ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dChleHByZXNzUmVxdWVzdDogZXhwcmVzcy5SZXF1ZXN0KTogSUNvbnRleHQge1xuICAgIHJldHVybiBEZW1vQXBpVjEuZ2V0Q29udGV4dChleHByZXNzUmVxdWVzdCk7XG59Il19