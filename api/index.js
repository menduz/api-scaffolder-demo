"use strict";
const base_1 = require('./base');
const controllers = [];
// /me
controllers.push(require('./impl/me'));
// /me/payments
controllers.push(require('./impl/me/payments'));
// /users/{userId}
controllers.push(require('./impl/userById'));
// /status
controllers.push(require('./impl/status'));
// /required/boolean
controllers.push(require('./impl/required/boolean'));
// /required/date
controllers.push(require('./impl/required/date'));
// /required/integer
controllers.push(require('./impl/required/integer'));
// /required/number
controllers.push(require('./impl/required/number'));
// /non-required/boolean
controllers.push(require('./impl/non/required/boolean'));
// /non-required/date
controllers.push(require('./impl/non/required/date'));
// /non-required/integer
controllers.push(require('./impl/non/required/integer'));
// /non-required/number
controllers.push(require('./impl/non/required/number'));
// /crud
controllers.push(require('./impl/crud'));
// /popularmedia
controllers.push(require('./impl/popularmedia'));
/** generates a new instance of each controller of the api. */
function initializeControllers() {
    let instances = [];
    controllers.forEach(x => {
        instances.push(new x.Controller());
    });
    return instances;
}
exports.initializeControllers = initializeControllers;
/** registers the controllers on a router */
function registerRouter(controllers, router) {
    if (!controllers)
        controllers = initializeControllers();
    if (!router)
        router = getMiddleware();
    controllers.forEach(x => x.registerRouter(router));
    return controllers;
}
exports.registerRouter = registerRouter;
/** gets the router */
function getMiddleware() {
    return base_1.DemoApi_V1.getMiddleware();
}
exports.getMiddleware = getMiddleware;
/** gets the context reference of the given request */
function getContext(expressRequest) {
    return base_1.DemoApi_V1.getContext(expressRequest);
}
exports.getContext = getContext;
exports.DemoApi_V1 = base_1.DemoApi_V1;
exports.HttpError = base_1.HttpError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsdUJBQThELFFBQVEsQ0FBQyxDQUFBO0FBRXZFLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUd2QixNQUFNO0FBQ04sV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUV2QyxlQUFlO0FBQ2YsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBRWhELGtCQUFrQjtBQUNsQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7QUFFN0MsVUFBVTtBQUNWLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFFM0Msb0JBQW9CO0FBQ3BCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztBQUVyRCxpQkFBaUI7QUFDakIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO0FBRWxELG9CQUFvQjtBQUNwQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7QUFFckQsbUJBQW1CO0FBQ25CLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUVwRCx3QkFBd0I7QUFDeEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO0FBRXpELHFCQUFxQjtBQUNyQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUM7QUFFdEQsd0JBQXdCO0FBQ3hCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQztBQUV6RCx1QkFBdUI7QUFDdkIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO0FBRXhELFFBQVE7QUFDUixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBRXpDLGdCQUFnQjtBQUNoQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7QUFJakQsOERBQThEO0FBQzlEO0lBQ0MsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBRW5CLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFSZSw2QkFBcUIsd0JBUXBDLENBQUE7QUFFRCw0Q0FBNEM7QUFDNUMsd0JBQStCLFdBQXNDLEVBQUUsTUFBTztJQUMxRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUFDLFdBQVcsR0FBRyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQUMsTUFBTSxHQUFHLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ3ZCLENBQUM7QUFMZSxzQkFBYyxpQkFLN0IsQ0FBQTtBQUVELHNCQUFzQjtBQUN0QjtJQUNJLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ25DLENBQUM7QUFGZSxxQkFBYSxnQkFFNUIsQ0FBQTtBQUVELHNEQUFzRDtBQUN0RCxvQkFBMkIsY0FBK0I7SUFDdEQsTUFBTSxDQUFDLGlCQUFPLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFGZSxrQkFBVSxhQUV6QixDQUFBO0FBRVksa0JBQVUsR0FBRyxpQkFBTyxDQUFDO0FBQ3JCLGlCQUFTLEdBQUcsZ0JBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgSVMgQU4gQVVUT0dFTkVSQVRFRCBGSUxFLCBBTlkgQ0hBTkdFUyBXSUxMIEJFIExPU1QuIERPIE5PIEVESVQgVEhJUyBGSUxFXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBEZW1vQXBpX1YxIGFzIGJhc2VBcGksIEh0dHBFcnJvciBhcyBodHRwRXJyb3IgfSBmcm9tICcuL2Jhc2UnO1xuXG5jb25zdCBjb250cm9sbGVycyA9IFtdO1xuXG5cbi8vIC9tZVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbWUnKSk7XG5cbi8vIC9tZS9wYXltZW50c1xuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbWUvcGF5bWVudHMnKSk7XG5cbi8vIC91c2Vycy97dXNlcklkfVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvdXNlckJ5SWQnKSk7XG5cbi8vIC9zdGF0dXNcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3N0YXR1cycpKTtcblxuLy8gL3JlcXVpcmVkL2Jvb2xlYW5cbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3JlcXVpcmVkL2Jvb2xlYW4nKSk7XG5cbi8vIC9yZXF1aXJlZC9kYXRlXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9yZXF1aXJlZC9kYXRlJykpO1xuXG4vLyAvcmVxdWlyZWQvaW50ZWdlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcmVxdWlyZWQvaW50ZWdlcicpKTtcblxuLy8gL3JlcXVpcmVkL251bWJlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcmVxdWlyZWQvbnVtYmVyJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL2Jvb2xlYW5cbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9ib29sZWFuJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL2RhdGVcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9kYXRlJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL2ludGVnZXJcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL25vbi9yZXF1aXJlZC9pbnRlZ2VyJykpO1xuXG4vLyAvbm9uLXJlcXVpcmVkL251bWJlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbm9uL3JlcXVpcmVkL251bWJlcicpKTtcblxuLy8gL2NydWRcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL2NydWQnKSk7XG5cbi8vIC9wb3B1bGFybWVkaWFcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3BvcHVsYXJtZWRpYScpKTtcblxuXG5cbi8qKiBnZW5lcmF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgZWFjaCBjb250cm9sbGVyIG9mIHRoZSBhcGkuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRyb2xsZXJzKCk6IGJhc2VBcGkuQmFzZUNvbnRyb2xsZXJbXSB7XG5cdGxldCBpbnN0YW5jZXMgPSBbXTtcblxuXHRjb250cm9sbGVycy5mb3JFYWNoKHggPT4ge1xuXHRcdGluc3RhbmNlcy5wdXNoKG5ldyB4LkNvbnRyb2xsZXIoKSk7XG5cdH0pO1xuXG5cdHJldHVybiBpbnN0YW5jZXM7XG59XG5cbi8qKiByZWdpc3RlcnMgdGhlIGNvbnRyb2xsZXJzIG9uIGEgcm91dGVyICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJSb3V0ZXIoY29udHJvbGxlcnM/OiBiYXNlQXBpLkJhc2VDb250cm9sbGVyW10sIHJvdXRlcj8pIHtcbiAgICBpZiAoIWNvbnRyb2xsZXJzKSBjb250cm9sbGVycyA9IGluaXRpYWxpemVDb250cm9sbGVycygpO1xuICAgIGlmICghcm91dGVyKSByb3V0ZXIgPSBnZXRNaWRkbGV3YXJlKCk7XG4gICAgY29udHJvbGxlcnMuZm9yRWFjaCh4ID0+IHgucmVnaXN0ZXJSb3V0ZXIocm91dGVyKSk7XG4gICAgcmV0dXJuIGNvbnRyb2xsZXJzO1xufVxuXG4vKiogZ2V0cyB0aGUgcm91dGVyICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWlkZGxld2FyZSgpIHtcbiAgICByZXR1cm4gYmFzZUFwaS5nZXRNaWRkbGV3YXJlKCk7XG59XG5cbi8qKiBnZXRzIHRoZSBjb250ZXh0IHJlZmVyZW5jZSBvZiB0aGUgZ2l2ZW4gcmVxdWVzdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQoZXhwcmVzc1JlcXVlc3Q6IGV4cHJlc3MuUmVxdWVzdCk6IElDb250ZXh0IHtcbiAgICByZXR1cm4gYmFzZUFwaS5nZXRDb250ZXh0KGV4cHJlc3NSZXF1ZXN0KTtcbn1cblxuZXhwb3J0IGNvbnN0IERlbW9BcGlfVjEgPSBiYXNlQXBpO1xuZXhwb3J0IGNvbnN0IEh0dHBFcnJvciA9IGh0dHBFcnJvcjtcbiJdfQ==