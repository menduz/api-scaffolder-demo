"use strict";
const base_1 = require('./base');
const controllers = [];
// /me
controllers.push(require('./impl/me'));
// /me/payments
controllers.push(require('./impl/me/payments'));
// /users/{userId}
controllers.push(require('./impl/userById'));
// /status
controllers.push(require('./impl/status'));
// /required/boolean
controllers.push(require('./impl/required/boolean'));
// /required/date
controllers.push(require('./impl/required/date'));
// /required/integer
controllers.push(require('./impl/required/integer'));
// /required/number
controllers.push(require('./impl/required/number'));
// /non-required/boolean
controllers.push(require('./impl/non/required/boolean'));
// /non-required/date
controllers.push(require('./impl/non/required/date'));
// /non-required/integer
controllers.push(require('./impl/non/required/integer'));
// /non-required/number
controllers.push(require('./impl/non/required/number'));
// /crud
controllers.push(require('./impl/crud'));
// /popularmedia
controllers.push(require('./impl/popularmedia'));
/** generates a new instance of each controller of the api. */
function initializeControllers() {
    let instances = [];
    controllers.forEach(x => {
        instances.push(new x.Controller());
    });
    return instances;
}
exports.initializeControllers = initializeControllers;
/** registers the controllers on a router */
function registerRouter(controllers, router) {
    if (!controllers)
        controllers = initializeControllers();
    if (!router)
        router = getMiddleware();
    controllers.forEach(x => x.registerRouter(router));
    return controllers;
}
exports.registerRouter = registerRouter;
/** gets the router */
function getMiddleware() {
    return base_1.DemoApiV1.getMiddleware();
}
exports.getMiddleware = getMiddleware;
/** gets the context reference of the given request */
function getContext(expressRequest) {
    return base_1.DemoApiV1.getContext(expressRequest);
}
exports.getContext = getContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsdUJBQTBCLFFBQVEsQ0FBQyxDQUFBO0FBRW5DLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUd2QixNQUFNO0FBQ04sV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUV2QyxlQUFlO0FBQ2YsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBRWhELGtCQUFrQjtBQUNsQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7QUFFN0MsVUFBVTtBQUNWLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFFM0Msb0JBQW9CO0FBQ3BCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztBQUVyRCxpQkFBaUI7QUFDakIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO0FBRWxELG9CQUFvQjtBQUNwQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7QUFFckQsbUJBQW1CO0FBQ25CLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUVwRCx3QkFBd0I7QUFDeEIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO0FBRXpELHFCQUFxQjtBQUNyQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUM7QUFFdEQsd0JBQXdCO0FBQ3hCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQztBQUV6RCx1QkFBdUI7QUFDdkIsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO0FBRXhELFFBQVE7QUFDUixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBRXpDLGdCQUFnQjtBQUNoQixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7QUFJakQsOERBQThEO0FBQzlEO0lBQ0MsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBRW5CLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFSZSw2QkFBcUIsd0JBUXBDLENBQUE7QUFFRCw0Q0FBNEM7QUFDNUMsd0JBQStCLFdBQXdDLEVBQUUsTUFBTztJQUM1RSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUFDLFdBQVcsR0FBRyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQUMsTUFBTSxHQUFHLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ3ZCLENBQUM7QUFMZSxzQkFBYyxpQkFLN0IsQ0FBQTtBQUVELHNCQUFzQjtBQUN0QjtJQUNJLE1BQU0sQ0FBQyxnQkFBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3JDLENBQUM7QUFGZSxxQkFBYSxnQkFFNUIsQ0FBQTtBQUVELHNEQUFzRDtBQUN0RCxvQkFBMkIsY0FBK0I7SUFDdEQsTUFBTSxDQUFDLGdCQUFTLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFGZSxrQkFBVSxhQUV6QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBTiBBVVRPR0VORVJBVEVEIEZJTEUsIEFOWSBDSEFOR0VTIFdJTEwgQkUgTE9TVC4gRE8gTk8gRURJVCBUSElTIEZJTEVcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5cbmltcG9ydCB7IERlbW9BcGlWMSB9IGZyb20gJy4vYmFzZSc7XG5cbmNvbnN0IGNvbnRyb2xsZXJzID0gW107XG5cblxuLy8gL21lXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9tZScpKTtcblxuLy8gL21lL3BheW1lbnRzXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9tZS9wYXltZW50cycpKTtcblxuLy8gL3VzZXJzL3t1c2VySWR9XG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC91c2VyQnlJZCcpKTtcblxuLy8gL3N0YXR1c1xuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvc3RhdHVzJykpO1xuXG4vLyAvcmVxdWlyZWQvYm9vbGVhblxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcmVxdWlyZWQvYm9vbGVhbicpKTtcblxuLy8gL3JlcXVpcmVkL2RhdGVcbmNvbnRyb2xsZXJzLnB1c2gocmVxdWlyZSgnLi9pbXBsL3JlcXVpcmVkL2RhdGUnKSk7XG5cbi8vIC9yZXF1aXJlZC9pbnRlZ2VyXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9yZXF1aXJlZC9pbnRlZ2VyJykpO1xuXG4vLyAvcmVxdWlyZWQvbnVtYmVyXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9yZXF1aXJlZC9udW1iZXInKSk7XG5cbi8vIC9ub24tcmVxdWlyZWQvYm9vbGVhblxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbm9uL3JlcXVpcmVkL2Jvb2xlYW4nKSk7XG5cbi8vIC9ub24tcmVxdWlyZWQvZGF0ZVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbm9uL3JlcXVpcmVkL2RhdGUnKSk7XG5cbi8vIC9ub24tcmVxdWlyZWQvaW50ZWdlclxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvbm9uL3JlcXVpcmVkL2ludGVnZXInKSk7XG5cbi8vIC9ub24tcmVxdWlyZWQvbnVtYmVyXG5jb250cm9sbGVycy5wdXNoKHJlcXVpcmUoJy4vaW1wbC9ub24vcmVxdWlyZWQvbnVtYmVyJykpO1xuXG4vLyAvY3J1ZFxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvY3J1ZCcpKTtcblxuLy8gL3BvcHVsYXJtZWRpYVxuY29udHJvbGxlcnMucHVzaChyZXF1aXJlKCcuL2ltcGwvcG9wdWxhcm1lZGlhJykpO1xuXG5cblxuLyoqIGdlbmVyYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBlYWNoIGNvbnRyb2xsZXIgb2YgdGhlIGFwaS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplQ29udHJvbGxlcnMoKTogRGVtb0FwaVYxLkJhc2VDb250cm9sbGVyW10ge1xuXHRsZXQgaW5zdGFuY2VzID0gW107XG5cblx0Y29udHJvbGxlcnMuZm9yRWFjaCh4ID0+IHtcblx0XHRpbnN0YW5jZXMucHVzaChuZXcgeC5Db250cm9sbGVyKCkpO1xuXHR9KTtcblxuXHRyZXR1cm4gaW5zdGFuY2VzO1xufVxuXG4vKiogcmVnaXN0ZXJzIHRoZSBjb250cm9sbGVycyBvbiBhIHJvdXRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyUm91dGVyKGNvbnRyb2xsZXJzPzogRGVtb0FwaVYxLkJhc2VDb250cm9sbGVyW10sIHJvdXRlcj8pIHtcbiAgICBpZiAoIWNvbnRyb2xsZXJzKSBjb250cm9sbGVycyA9IGluaXRpYWxpemVDb250cm9sbGVycygpO1xuICAgIGlmICghcm91dGVyKSByb3V0ZXIgPSBnZXRNaWRkbGV3YXJlKCk7XG4gICAgY29udHJvbGxlcnMuZm9yRWFjaCh4ID0+IHgucmVnaXN0ZXJSb3V0ZXIocm91dGVyKSk7XG4gICAgcmV0dXJuIGNvbnRyb2xsZXJzO1xufVxuXG4vKiogZ2V0cyB0aGUgcm91dGVyICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWlkZGxld2FyZSgpIHtcbiAgICByZXR1cm4gRGVtb0FwaVYxLmdldE1pZGRsZXdhcmUoKTtcbn1cblxuLyoqIGdldHMgdGhlIGNvbnRleHQgcmVmZXJlbmNlIG9mIHRoZSBnaXZlbiByZXF1ZXN0ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dChleHByZXNzUmVxdWVzdDogZXhwcmVzcy5SZXF1ZXN0KTogSUNvbnRleHQge1xuICAgIHJldHVybiBEZW1vQXBpVjEuZ2V0Q29udGV4dChleHByZXNzUmVxdWVzdCk7XG59XG4iXX0=